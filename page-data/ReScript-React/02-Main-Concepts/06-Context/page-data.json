{"componentChunkName":"component---src-templates-docs-js","path":"/ReScript-React/02-Main-Concepts/06-Context","result":{"data":{"site":{"siteMetadata":{"title":"ReScript in Korean","docsLocation":"https://github.com/green-labs/rescript-in-korean/tree/main/content"}},"mdx":{"fields":{"id":"c81d3d0b-2c4a-5642-b77e-8585b1775ff9","title":"컨텍스트","slug":"/ReScript-React/02-Main-Concepts/06-Context"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"컨텍스트\",\n  \"metaTitle\": \"06-컨텍스트(Context)\",\n  \"metaDescription\": \"Details about Context in ReScript and React\",\n  \"canonical\": \"https://rescript-lang.org/docs/react/latest/context\",\n  \"sourceUrl\": \"https://rescript-lang.org/docs/react/latest/context\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Context provides a way to pass data through the component tree without having to pass props down manually at every level.\"), mdx(\"h2\", null, \"Why Context?\"), mdx(\"p\", null, \"In a typical React application, data is passed top-down (parent to child) via props, but this can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uCC38\\uACE0\"), \" In ReScript, passing down props is way simpler than in TS / JS due to its \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/rescript-in-korean/docs/manual/latest/jsx#punning\"\n  }), \"JSX prop punning\"), \" feature and strong type inference, so it's often preferrable to keep it simple and just do props passing. Less magic means more transparency!\"), mdx(\"h2\", null, \"When to Use Context\"), mdx(\"p\", null, \"Context is designed to share data that can be considered \\u201Cglobal\\u201D for a tree of React components, such as the current authenticated user, theme, or preferred language. For example, in the code below we manually thread through a \\u201Ctheme\\u201D prop in order to style the Button component:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"// src/App.res\\ntype theme = Light | Dark;\\n\\nmodule Button = {\\n  @react.component\\n  let make = (~theme) => {\\n    let className = switch theme {\\n      | Light => \\\"theme-light\\\"\\n      | Dark => \\\"theme-black\\\"\\n    };\\n    <button className> {React.string(\\\"Click me\\\")} </button>\\n  }\\n}\\n\\nmodule ThemedButton = {\\n  @react.component\\n  let make = (~theme) => {\\n    <Button theme />\\n  }\\n}\\n\\nmodule Toolbar = {\\n  @react.component\\n  let make = (~theme) => {\\n    <div>\\n      <ThemedButton theme/>\\n    </div>\\n  }\\n}\\n\\n@react.component\\nlet make = () => {\\n  // We define the theme in the\\n  // toplevel App component and\\n  // pass it down\\n  <Toolbar theme=Dark/>\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function Button(Props) {\\n  var theme = Props.theme;\\n  var className = theme ? 'theme-black' : 'theme-light';\\n  return React.createElement(\\n    'button',\\n    {\\n      className: className,\\n    },\\n    'Click me'\\n  );\\n}\\n\\nfunction ThemedButton(Props) {\\n  var theme = Props.theme;\\n  return React.createElement(Button, {\\n    theme: theme,\\n  });\\n}\\n\\nfunction Toolbar(Props) {\\n  var theme = Props.theme;\\n  return React.createElement(\\n    'div',\\n    undefined,\\n    React.createElement(ThemedButton, {\\n      theme: theme,\\n    })\\n  );\\n}\\n\\nfunction Playground(Props) {\\n  return React.createElement(Toolbar, {\\n    theme: /* Dark */ 1,\\n  });\\n}\\n\")), mdx(\"p\", null, \"Using context, we can avoid passing props through intermediate elements:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"// src/App.res\\n\\nmodule ThemeContext = {\\n  type theme = Light | Dark;\\n  let context = React.createContext(Light)\\n\\n  module Provider = {\\n    let provider = React.Context.provider(context)\\n\\n    @react.component\\n    let make = (~value, ~children) => {\\n      React.createElement(provider, {\\\"value\\\": value, \\\"children\\\": children})\\n    }\\n  }\\n}\\n\\nmodule Button = {\\n  @react.component\\n  let make = (~theme) => {\\n    let className = switch theme {\\n      | ThemeContext.Light => \\\"theme-light\\\"\\n      | Dark => \\\"theme-black\\\"\\n    };\\n    <button className> {React.string(\\\"Click me\\\")} </button>\\n  }\\n}\\n\\nmodule ThemedButton = {\\n  @react.component\\n  let make = () => {\\n    let theme = React.useContext(ThemeContext.context)\\n\\n    <Button theme/>\\n  }\\n}\\n\\nmodule Toolbar = {\\n  @react.component\\n  let make = () => {\\n    <div> <ThemedButton /> </div>\\n  }\\n}\\n\\n@react.component\\nlet make = () => {\\n  <ThemeContext.Provider value=ThemeContext.Dark>\\n    <div> <Toolbar /> </div>\\n  </ThemeContext.Provider>\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var context = React.createContext(/* Light */ 0);\\n\\nvar provider = context.Provider;\\n\\nfunction ThemeContext$Provider(Props) {\\n  var value = Props.value;\\n  var children = Props.children;\\n  return React.createElement(provider, {\\n    value: value,\\n    children: children,\\n  });\\n}\\n\\nfunction Button(Props) {\\n  var theme = Props.theme;\\n  var className = theme ? 'theme-black' : 'theme-light';\\n  return React.createElement(\\n    'button',\\n    {\\n      className: className,\\n    },\\n    'Click me'\\n  );\\n}\\n\\nvar Button = {\\n  make: Button,\\n};\\n\\nfunction ThemedButton(Props) {\\n  var theme = React.useContext(context);\\n  return React.createElement(Button, {\\n    theme: theme,\\n  });\\n}\\n\\nvar ThemedButton = {\\n  make: ThemedButton,\\n};\\n\\nfunction Toolbar(Props) {\\n  return React.createElement('div', undefined, React.createElement(ThemedButton, {}));\\n}\\n\\nvar Toolbar = {\\n  make: Toolbar,\\n};\\n\\nfunction Playground(Props) {\\n  return React.createElement(ThemeContext$Provider, {\\n    value: /* Dark */ 1,\\n    children: React.createElement('div', undefined, React.createElement(Toolbar, {})),\\n  });\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#why-context","title":"Why Context?"},{"url":"#when-to-use-context","title":"When to Use Context"}]},"parent":{"__typename":"File","relativePath":"ReScript-React/02-Main-Concepts/06-Context.mdx"},"frontmatter":{"metaTitle":"06-컨텍스트(Context)","metaDescription":"Details about Context in ReScript and React","sourceUrl":"https://rescript-lang.org/docs/react/latest/context","canonical":"https://rescript-lang.org/docs/react/latest/context"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Build-System","title":"빌드 시스템"}}},{"node":{"fields":{"slug":"/Extra","title":"그 외"}}},{"node":{"fields":{"slug":"/Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/JavaScript-Interop","title":"자바스크립트 인터롭"}}},{"node":{"fields":{"slug":"/Language-Features","title":"언어적인 특징"}}},{"node":{"fields":{"slug":"/Overview","title":"개요"}}},{"node":{"fields":{"slug":"/ReScript-React","title":"ReScript React"}}},{"node":{"fields":{"slug":"/","title":"ReScript in Korean"}}},{"node":{"fields":{"slug":"/Build-System/01-Overview","title":"Build System Overview"}}},{"node":{"fields":{"slug":"/Build-System/02-Configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/Build-System/03-Configuration-Schema","title":"Configuration Schema"}}},{"node":{"fields":{"slug":"/Build-System/04-Interop-with-JS-Build-Systems","title":"Interop with JS Build Systems"}}},{"node":{"fields":{"slug":"/Build-System/05-Performance","title":"Performance"}}},{"node":{"fields":{"slug":"/Extra/01-Newcomer-Examples","title":"초보자를 위한 예제"}}},{"node":{"fields":{"slug":"/Extra/02-Project-Structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/Extra/03-FAQ","title":"자주 묻는 질문"}}},{"node":{"fields":{"slug":"/Guides/01-Converting-from-JS","title":"자바스크립트 파일을 변환하기"}}},{"node":{"fields":{"slug":"/Guides/02-Libraries","title":"Libraries"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/01-Embed-Raw-JavaScript","title":"Embed Raw JavaScript"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/02-Shared-Data-Types","title":"데이터 타입 공유"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","title":"External (자바스크립트 라이브러리 바인딩)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/04-Bind-to-JS-Object","title":"자바스크립트 객체에 바인딩하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/05-Bind-to-JS-Function","title":"Bind to JS Function"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/06-Import-from-Export-to-JS","title":"Import from / Export to JS"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","title":"Bind to Global JS Values"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/08-JSON","title":"JSON"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/09-Inlining-Constants","title":"Inlining Constants"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/10-Use-Illegal-Identifier-Names","title":"Use Illegal Identifier Names"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers","title":"인터롭 코드 자동 생성하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/12-Browser-Support-Polyfills","title":"Browser Support & Polyfills"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/13-Interop-Cheatsheet","title":"Interop Cheatsheet"}}},{"node":{"fields":{"slug":"/Language-Features/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Language-Features/02-Let-Binding","title":"Let Binding"}}},{"node":{"fields":{"slug":"/Language-Features/03-Type","title":"타입"}}},{"node":{"fields":{"slug":"/Language-Features/04-Primitive-Types","title":"원시 타입"}}},{"node":{"fields":{"slug":"/Language-Features/05-Tuple","title":"튜플"}}},{"node":{"fields":{"slug":"/Language-Features/06-Record","title":"레코드"}}},{"node":{"fields":{"slug":"/Language-Features/07-Object","title":"객체"}}},{"node":{"fields":{"slug":"/Language-Features/08-Variant","title":"배리언트"}}},{"node":{"fields":{"slug":"/Language-Features/09-Polymorphic-Variant","title":"Polymorphic Variant"}}},{"node":{"fields":{"slug":"/Language-Features/10-Null-Undefined-and-Option","title":"Null, Undefined 그리고 Option"}}},{"node":{"fields":{"slug":"/Language-Features/11-Array-List","title":"배열과 리스트"}}},{"node":{"fields":{"slug":"/Language-Features/12-Function","title":"함수"}}},{"node":{"fields":{"slug":"/Language-Features/13-Control-Flow","title":"제어 흐름"}}},{"node":{"fields":{"slug":"/Language-Features/14-Pipe","title":"파이프"}}},{"node":{"fields":{"slug":"/Language-Features/15-Pattern-Matching-Destructuring","title":"패턴 매칭 / 구조분해"}}},{"node":{"fields":{"slug":"/Language-Features/16-Mutation","title":"가변"}}},{"node":{"fields":{"slug":"/Language-Features/17-JSX","title":"JSX"}}},{"node":{"fields":{"slug":"/Language-Features/18-Exception","title":"예외"}}},{"node":{"fields":{"slug":"/Language-Features/19-Lazy-Value","title":"Lazy Value"}}},{"node":{"fields":{"slug":"/Language-Features/20-Async-Promise","title":"Async & Promise"}}},{"node":{"fields":{"slug":"/Language-Features/21-Module","title":"모듈"}}},{"node":{"fields":{"slug":"/Language-Features/22-Import-Export","title":"Import & Export"}}},{"node":{"fields":{"slug":"/Language-Features/23-Attribute-Decorator","title":"속성 (데코레이터)"}}},{"node":{"fields":{"slug":"/Language-Features/24-Unboxed","title":"언박싱"}}},{"node":{"fields":{"slug":"/Language-Features/25-Reserved-Keyword","title":"예약된 키워드"}}},{"node":{"fields":{"slug":"/Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/03-EditorPlugins","title":"편집기 플러그인"}}},{"node":{"fields":{"slug":"/Overview/04-Migrate-to-ReScript-Syntax","title":"리스크립트 문법으로 변경하기"}}},{"node":{"fields":{"slug":"/Overview/05-Try","title":"CLI로 직접 해보기"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts","title":"메인 컨셉"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management","title":"리액트 훅과 상태 관리"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/01-@deriving(accessors)","title":"@deriving(accessor)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/02-@deriving(jsConverter)","title":"@deriving(jsConverter)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/03-@deriving(abstract)","title":"@deriving(abstract)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/04-@obj","title":"@obj"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/01-Elements-and-JSX","title":"엘레멘트와 JSX"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/02-Rendering-Elements","title":"엘레멘트 렌더링하기"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/03-Components-and-Props","title":"컴포넌트와 Props"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/04-Arrays-and-Keys","title":"배열과 키"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/05-Refs-and-the-DOM","title":"Refs와 DOM"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/06-Context","title":"컨텍스트"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/01-Hooks-and-State-Management-Overview","title":"리액트 훅과 상태 관리 개요"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/02-useEffect","title":"useEffect"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/03-useState","title":"useState"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/04-useReducer","title":"useReducer"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/05-useContext","title":"useContext"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/06-useRef","title":"useRef"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/07-Build-A-Custom-Hook","title":"커스텀 훅 만들기"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/01-Beyond-JSX","title":"JSX를 넘어서"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/02-Forwarding-Refs","title":"Ref 포워딩하기"}}}]}},"pageContext":{"id":"c81d3d0b-2c4a-5642-b77e-8585b1775ff9"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}