{"componentChunkName":"component---src-templates-docs-js","path":"/ReScript-React/02-Main-Concepts/04-Arrays-and-Keys","result":{"data":{"site":{"siteMetadata":{"title":"ReScript in Korean","docsLocation":"https://github.com/green-labs/rescript-in-korean/tree/main/content"}},"mdx":{"fields":{"id":"f789e798-9381-5ac5-9bbc-dd1f21cae7f3","title":"배열과 키","slug":"/ReScript-React/02-Main-Concepts/04-Arrays-and-Keys"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"배열과 키\",\n  \"metaTitle\": \"04-배열과 키(Arrays and Keys)\",\n  \"metaDescription\": \"Rendering arrays and handling keys in ReScript and React\",\n  \"canonical\": \"https://rescript-lang.org/docs/react/latest/arrays-and-keys\",\n  \"sourceUrl\": \"https://rescript-lang.org/docs/react/latest/arrays-and-keys\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Whenever we are transforming data into an array of elements and put it in our React tree, we need to make sure to give every element an unique identifier to help React distinguish elements for each render. This page will explain the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"key\"), \" attribute and how to apply it whenever we need to map data to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.element\"), \"s.\"), mdx(\"h2\", null, \"Keys & Rendering Arrays\"), mdx(\"p\", null, \"Keys help React identify which elements have been changed, added, or removed throughout each render. Keys should be given to elements inside the array to give the elements a stable identity:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"let numbers = [1, 2, 3, 4, 5];\\n\\nlet items = Belt.Array.map(numbers, (number) => {\\n  <li key={Belt.Int.toString(number)}> {React.int(number)} </li>\\n})\\n\")), mdx(\"p\", null, \"The best way to pick a key is to use a string that uniquely identifies a list item among its siblings. Most often you would use IDs from your data as keys:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"type todo = {id: string, text: string}\\n\\nlet todos = [\\n  {id: \\\"todo1\\\", text: \\\"Todo 1\\\"},\\n  {id: \\\"todo2\\\", text: \\\"Todo 2\\\"}\\n]\\n\\nlet items = Belt.Array.map(todos, todo => {\\n  <li key={todo.id}> {React.string(todo.text)} </li>\\n})\\n\")), mdx(\"p\", null, \"If you don\\u2019t have stable IDs for rendered items, you may use the item index as a key as a last resort:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\",\n    \"metastring\": \"{2,3}\",\n    \"{2,3}\": true\n  }), \"let items = Belt.Array.mapWithIndex(todos, (todo, i) => {\\n  // Only do this if items have no stable id\\n  <li key={i}>\\n    {todo.text}\\n  </li>\\n});\\n\")), mdx(\"h3\", null, \"Keys Must Only Be Unique Among Siblings\"), mdx(\"p\", null, \"Keys used within arrays should be unique among their siblings. However they don\\u2019t need to be globally unique. We can use the same keys when we produce two different arrays:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\",\n    \"metastring\": \"{6,10,17,18,25,27}\",\n    \"{6,10,17,18,25,27}\": true\n  }), \"type post = {id: string, title: string, content: string}\\n\\nmodule Blog = {\\n  @react.component\\n  let make = (~posts: array<post>) => {\\n    let sidebar =\\n      <ul>\\n        {\\n          Belt.Array.map(posts, (post) => {\\n            <li key={post.id}>\\n              {React.string(post.title)}\\n            </li>\\n          })->React.array\\n        }\\n      </ul>\\n\\n    let content = Belt.Array.map(posts, (post) => {\\n        <div key={post.id}>\\n          <h3>{React.string(post.title)}</h3>\\n          <p>{React.string(post.content)}</p>\\n        </div>\\n    });\\n\\n      <div>\\n      {sidebar}\\n      <hr />\\n      {React.array(content)}\\n    </div>\\n  }\\n}\\n\\nlet posts = [\\n  {id: \\\"1\\\", title: \\\"Hello World\\\", content: \\\"Welcome to learning ReScript & React!\\\"},\\n  {id: \\\"2\\\", title: \\\"Installation\\\", content: \\\"You can install reason-react from npm.\\\"}\\n]\\n\\nlet blog = <Blog posts/>\\n\")), mdx(\"h2\", null, \"Rendering list Values\"), mdx(\"p\", null, \"In case you ever want to render a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"list\"), \" of items, you can do something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"type todo = {id: string, text: string}\\nlet todoList = list{\\n  {id: \\\"todo1\\\", text: \\\"Todo 1\\\"},\\n  {id: \\\"todo2\\\", text: \\\"Todo 2\\\"}\\n}\\n\\nlet items =\\n  todoList\\n  ->Belt.List.toArray\\n  ->Belt.List.map((todo) => {\\n  <li key={todo.id}>\\n    {React.string(todo.text)}\\n  </li>\\n})\\n\\n<div> {React.array(items)} </div>\\n\")), mdx(\"p\", null, \"We use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Belt.List.toArray\"), \" to convert our list to an array before creating our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"array<React.element>\"), \". Please note that using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"list\"), \" has performance impact due to extra conversion costs.\"), mdx(\"p\", null, \"In 99% you'll want to use arrays (seamless interop, faster JS code), but in some cases it might make sense to use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"list\"), \" to leverage advanced pattern matching features etc.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#keys--rendering-arrays","title":"Keys & Rendering Arrays","items":[{"url":"#keys-must-only-be-unique-among-siblings","title":"Keys Must Only Be Unique Among Siblings"}]},{"url":"#rendering-list-values","title":"Rendering list Values"}]},"parent":{"__typename":"File","relativePath":"ReScript-React/02-Main-Concepts/04-Arrays-and-Keys.mdx"},"frontmatter":{"metaTitle":"04-배열과 키(Arrays and Keys)","metaDescription":"Rendering arrays and handling keys in ReScript and React","sourceUrl":"https://rescript-lang.org/docs/react/latest/arrays-and-keys","canonical":"https://rescript-lang.org/docs/react/latest/arrays-and-keys"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Extra","title":"그 외"}}},{"node":{"fields":{"slug":"/Build-System","title":"빌드 시스템"}}},{"node":{"fields":{"slug":"/Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/Language-Features","title":"언어적인 특징"}}},{"node":{"fields":{"slug":"/Overview","title":"개요"}}},{"node":{"fields":{"slug":"/JavaScript-Interop","title":"자바스크립트 인터롭"}}},{"node":{"fields":{"slug":"/ReScript-React","title":"ReScript React"}}},{"node":{"fields":{"slug":"/","title":"ReScript in Korean"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts","title":"메인 컨셉"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management","title":"리액트 훅과 상태 관리"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/02-Forwarding-Refs","title":"Ref 포워딩하기"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/01-Beyond-JSX","title":"JSX를 넘어서"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/02-useEffect","title":"useEffect"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/01-Hooks-and-State-Management-Overview","title":"리액트 훅과 상태 관리 개요"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/03-useState","title":"useState"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/04-useReducer","title":"useReducer"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/07-Build-A-Custom-Hook","title":"커스텀 훅 만들기"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/05-useContext","title":"useContext"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/06-useRef","title":"useRef"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/02-Rendering-Elements","title":"엘레멘트 렌더링하기"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/01-Elements-and-JSX","title":"엘레멘트와 JSX"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/03-Components-and-Props","title":"컴포넌트와 Props"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/06-Context","title":"컨텍스트"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/04-Arrays-and-Keys","title":"배열과 키"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/05-Refs-and-the-DOM","title":"Refs와 DOM"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/04-Migrate-to-ReScript-Syntax","title":"리스크립트 문법으로 변경하기"}}},{"node":{"fields":{"slug":"/Language-Features/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Overview/03-EditorPlugins","title":"편집기 플러그인"}}},{"node":{"fields":{"slug":"/Overview/05-Try","title":"CLI로 직접 해보기"}}},{"node":{"fields":{"slug":"/Language-Features/02-Let-Binding","title":"Let Binding"}}},{"node":{"fields":{"slug":"/Language-Features/03-Type","title":"타입"}}},{"node":{"fields":{"slug":"/Language-Features/05-Tuple","title":"튜플"}}},{"node":{"fields":{"slug":"/Language-Features/04-Primitive-Types","title":"원시 타입"}}},{"node":{"fields":{"slug":"/Language-Features/06-Record","title":"레코드"}}},{"node":{"fields":{"slug":"/Language-Features/07-Object","title":"객체"}}},{"node":{"fields":{"slug":"/Language-Features/08-Variant","title":"배리언트"}}},{"node":{"fields":{"slug":"/Language-Features/10-Null-Undefined-and-Option","title":"Null, Undefined 그리고 Option"}}},{"node":{"fields":{"slug":"/Language-Features/11-Array-List","title":"배열과 리스트"}}},{"node":{"fields":{"slug":"/Language-Features/09-Polymorphic-Variant","title":"Polymorphic Variant"}}},{"node":{"fields":{"slug":"/Language-Features/14-Pipe","title":"파이프"}}},{"node":{"fields":{"slug":"/Language-Features/12-Function","title":"함수"}}},{"node":{"fields":{"slug":"/Language-Features/13-Control-Flow","title":"제어 흐름"}}},{"node":{"fields":{"slug":"/Language-Features/16-Mutation","title":"가변"}}},{"node":{"fields":{"slug":"/Language-Features/15-Pattern-Matching-Destructuring","title":"패턴 매칭 / 구조분해"}}},{"node":{"fields":{"slug":"/Language-Features/17-JSX","title":"JSX"}}},{"node":{"fields":{"slug":"/Language-Features/18-Exception","title":"예외"}}},{"node":{"fields":{"slug":"/Language-Features/19-Lazy-Value","title":"Lazy Value"}}},{"node":{"fields":{"slug":"/Language-Features/21-Module","title":"모듈"}}},{"node":{"fields":{"slug":"/Language-Features/22-Import-Export","title":"Import & Export"}}},{"node":{"fields":{"slug":"/Language-Features/20-Async-Promise","title":"Async & Promise"}}},{"node":{"fields":{"slug":"/Language-Features/23-Attribute-Decorator","title":"속성 (데코레이터)"}}},{"node":{"fields":{"slug":"/Language-Features/24-Unboxed","title":"언박싱"}}},{"node":{"fields":{"slug":"/Language-Features/25-Reserved-Keyword","title":"예약된 키워드"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/02-Shared-Data-Types","title":"데이터 타입 공유"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/01-Embed-Raw-JavaScript","title":"Embed Raw JavaScript"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","title":"External (자바스크립트 라이브러리 바인딩)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/04-Bind-to-JS-Object","title":"자바스크립트 객체에 바인딩하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/05-Bind-to-JS-Function","title":"Bind to JS Function"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/06-Import-from-Export-to-JS","title":"Import from / Export to JS"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","title":"Bind to Global JS Values"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/08-JSON","title":"JSON"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/09-Inlining-Constants","title":"Inlining Constants"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/10-Use-Illegal-Identifier-Names","title":"Use Illegal Identifier Names"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/12-Browser-Support-Polyfills","title":"Browser Support & Polyfills"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers","title":"인터롭 코드 자동 생성하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/13-Interop-Cheatsheet","title":"Interop Cheatsheet"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/01-@deriving(accessors)","title":"@deriving(accessor)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/02-@deriving(jsConverter)","title":"@deriving(jsConverter)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/03-@deriving(abstract)","title":"@deriving(abstract)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/04-@obj","title":"@obj"}}},{"node":{"fields":{"slug":"/Guides/01-Converting-from-JS","title":"자바스크립트 파일을 변환하기"}}},{"node":{"fields":{"slug":"/Guides/02-Libraries","title":"Libraries"}}},{"node":{"fields":{"slug":"/Extra/01-Newcomer-Examples","title":"초보자를 위한 예제"}}},{"node":{"fields":{"slug":"/Extra/03-FAQ","title":"자주 묻는 질문"}}},{"node":{"fields":{"slug":"/Extra/02-Project-Structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/Build-System/01-Overview","title":"Build System Overview"}}},{"node":{"fields":{"slug":"/Build-System/02-Configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/Build-System/03-Configuration-Schema","title":"Configuration Schema"}}},{"node":{"fields":{"slug":"/Build-System/05-Performance","title":"Performance"}}},{"node":{"fields":{"slug":"/Build-System/04-Interop-with-JS-Build-Systems","title":"Interop with JS Build Systems"}}}]}},"pageContext":{"id":"f789e798-9381-5ac5-9bbc-dd1f21cae7f3"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}