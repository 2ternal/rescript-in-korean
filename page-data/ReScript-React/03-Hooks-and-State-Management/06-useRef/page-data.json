{"componentChunkName":"component---src-templates-docs-js","path":"/ReScript-React/03-Hooks-and-State-Management/06-useRef","result":{"data":{"site":{"siteMetadata":{"title":"ReScript in Korean","docsLocation":"https://github.com/green-labs/rescript-in-korean/tree/main/content"}},"mdx":{"fields":{"id":"c7d5839e-f1bb-5f43-b405-127b753221ee","title":"useRef","slug":"/ReScript-React/03-Hooks-and-State-Management/06-useRef"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"useRef\",\n  \"metaTitle\": \"06-useRef Hook\",\n  \"metaDescription\": \"Details about the useRef React hook in ReScript\",\n  \"canonical\": \"https://rescript-lang.org/docs/react/latest/hooks-ref\",\n  \"sourceUrl\": \"https://rescript-lang.org/docs/react/latest/hooks-ref\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useRef\"), \" hooks creates and manages mutable containers inside your React component.\"), mdx(\"h2\", null, \"\\uC0AC\\uC6A9\\uBC95\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"let refContainer = React.useRef(initialValue);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var button = React.useRef(null);\\nReact.useRef(0);\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.useRef\"), \" returns a mutable ref object whose \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".current\"), \" record field is initialized to the passed argument (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialValue\"), \"). The returned object will persist for the full lifetime of the component.\"), mdx(\"p\", null, \"Essentially, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.ref\"), \" is like a \\\"box\\\" that can hold a mutable value in its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".current\"), \" record field.\"), mdx(\"p\", null, \"You might be familiar with refs primarily as a way to access the DOM. If you pass a ref object to React with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div ref={ReactDOM.Ref.domRef(myRef)} />\"), \", React will set its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".current\"), \" property to the corresponding DOM node whenever that node changes.\"), mdx(\"p\", null, \"However, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useRef()\"), \" is useful for more than the ref attribute. It's handy for keeping any mutable value around similar to how you\\u2019d use instance fields in classes.\"), mdx(\"p\", null, \"This works because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useRef()\"), \" creates a plain JavaScript object. The only difference between \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useRef()\"), \" and creating a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{current: ...}\"), \" object yourself is that useRef will give you the same ref object on every render.\"), mdx(\"p\", null, \"Keep in mind that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useRef\"), \" doesn\\u2019t notify you when its content changes. Mutating the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".current\"), \" record field doesn\\u2019t cause a re-render. If you want to run some code when React attaches or detaches a ref to a DOM node, you may want to use a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"./refs-and-the-dom#callback-refs\"\n  }), \"callback ref\"), \" instead.\"), mdx(\"p\", null, \"More infos on direct DOM manipulation can be found in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"./refs-and-the-dom\"\n  }), \"Refs and the DOM\"), \" section.\"), mdx(\"h2\", null, \"\\uC608\\uC81C\"), mdx(\"h3\", null, \"Text \\uC778\\uD48B\\uC758 \\uD3EC\\uCEE4\\uC2A4 \\uAD00\\uB9AC\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"// TextInputWithFocusButton.re\\n\\n@bs.send external focus: Dom.element => unit = \\\"focus\\\"\\n\\n@react.component\\nlet make = () => {\\n  let inputEl = React.useRef(Js.Nullable.null)\\n\\n  let onClick = _ => {\\n    inputEl.current\\n    ->Js.Nullable.toOption\\n    ->Belt.Option.forEach(input => input->focus)\\n  }\\n\\n  <>\\n    <input ref={ReactDOM.Ref.domRef(inputEl)} type_=\\\"text\\\" />\\n    <button onClick> {React.string(\\\"Focus the input\\\")} </button>\\n  </>\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function TextInputWithFocusButton(Props) {\\n  var inputEl = React.useRef(null);\\n  var onClick = function(param) {\\n    return Belt_Option.forEach(Caml_option.nullable_to_opt(inputEl.current), function(input) {\\n      input.focus();\\n    });\\n  };\\n  return React.createElement(\\n    React.Fragment,\\n    undefined,\\n    React.createElement('input', {\\n      ref: inputEl,\\n      type: 'text',\\n    }),\\n    React.createElement(\\n      'button',\\n      {\\n        onClick: onClick,\\n      },\\n      'Focus the input'\\n    )\\n  );\\n}\\n\")), mdx(\"h3\", null, \"\\uCF5C\\uBC31 Ref\\uC758 \\uC0AC\\uC6A9\"), mdx(\"p\", null, \"Reusing the example from our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"./refs-and-the-dom#callback-refs\"\n  }), \"Refs and the DOM\"), \" section:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"// CustomTextInput.re\\n\\n@bs.send external focus: Dom.element => unit = \\\"focus\\\"\\n\\n@react.component\\nlet make = () => {\\n  let textInput = React.useRef(Js.Nullable.null)\\n  let setTextInputRef = element => {\\n    textInput.current = element;\\n  }\\n\\n  let focusTextInput = _ => {\\n    textInput.current\\n    ->Js.Nullable.toOption\\n    ->Belt.Option.forEach(input => input->focus)\\n  }\\n\\n  <div>\\n    <input type_=\\\"text\\\" ref={ReactDOM.Ref.callbackDomRef(setTextInputRef)} />\\n    <input\\n      type_=\\\"button\\\" value=\\\"Focus the text input\\\" onClick={focusTextInput}\\n    />\\n  </div>\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function CustomTextInput(Props) {\\n  var textInput = React.useRef(null);\\n  var setTextInputRef = function(element) {\\n    textInput.current = element;\\n  };\\n  var focusTextInput = function(param) {\\n    return Belt_Option.forEach(Caml_option.nullable_to_opt(textInput.current), function(input) {\\n      input.focus();\\n    });\\n  };\\n  return React.createElement(\\n    'div',\\n    undefined,\\n    React.createElement('input', {\\n      ref: setTextInputRef,\\n      type: 'text',\\n    }),\\n    React.createElement('input', {\\n      type: 'button',\\n      value: 'Focus the text input',\\n      onClick: focusTextInput,\\n    })\\n  );\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#사용법","title":"사용법"},{"url":"#예제","title":"예제","items":[{"url":"#text-인풋의-포커스-관리","title":"Text 인풋의 포커스 관리"},{"url":"#콜백-ref의-사용","title":"콜백 Ref의 사용"}]}]},"parent":{"__typename":"File","relativePath":"ReScript-React/03-Hooks-and-State-Management/06-useRef.mdx"},"frontmatter":{"metaTitle":"06-useRef Hook","metaDescription":"Details about the useRef React hook in ReScript","sourceUrl":"https://rescript-lang.org/docs/react/latest/hooks-ref","canonical":"https://rescript-lang.org/docs/react/latest/hooks-ref"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Build-System","title":"빌드 시스템"}}},{"node":{"fields":{"slug":"/Extra","title":"그 외"}}},{"node":{"fields":{"slug":"/Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/JavaScript-Interop","title":"자바스크립트 인터롭"}}},{"node":{"fields":{"slug":"/Language-Features","title":"언어적인 특징"}}},{"node":{"fields":{"slug":"/Overview","title":"개요"}}},{"node":{"fields":{"slug":"/ReScript-React","title":"ReScript React"}}},{"node":{"fields":{"slug":"/","title":"ReScript in Korean"}}},{"node":{"fields":{"slug":"/Build-System/01-Overview","title":"Build System Overview"}}},{"node":{"fields":{"slug":"/Build-System/02-Configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/Build-System/03-Configuration-Schema","title":"Configuration Schema"}}},{"node":{"fields":{"slug":"/Build-System/04-Interop-with-JS-Build-Systems","title":"Interop with JS Build Systems"}}},{"node":{"fields":{"slug":"/Build-System/05-Performance","title":"Performance"}}},{"node":{"fields":{"slug":"/Extra/01-Newcomer-Examples","title":"초보자를 위한 예제"}}},{"node":{"fields":{"slug":"/Extra/02-Project-Structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/Extra/03-FAQ","title":"자주 묻는 질문"}}},{"node":{"fields":{"slug":"/Guides/01-Converting-from-JS","title":"자바스크립트 파일을 변환하기"}}},{"node":{"fields":{"slug":"/Guides/02-Libraries","title":"Libraries"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/04-Bind-to-JS-Object","title":"자바스크립트 객체에 바인딩하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/05-Bind-to-JS-Function","title":"Bind to JS Function"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/06-Import-from-Export-to-JS","title":"Import from / Export to JS"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","title":"Bind to Global JS Values"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/08-JSON","title":"JSON"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/09-Inlining-Constants","title":"Inlining Constants"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/10-Use-Illegal-Identifier-Names","title":"Use Illegal Identifier Names"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers","title":"인터롭 코드 자동 생성하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/12-Browser-Support-Polyfills","title":"Browser Support & Polyfills"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/13-Interop-Cheatsheet","title":"Interop Cheatsheet"}}},{"node":{"fields":{"slug":"/Language-Features/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Language-Features/02-Let-Binding","title":"Let Binding"}}},{"node":{"fields":{"slug":"/Language-Features/03-Type","title":"타입"}}},{"node":{"fields":{"slug":"/Language-Features/04-Primitive-Types","title":"원시 타입"}}},{"node":{"fields":{"slug":"/Language-Features/05-Tuple","title":"튜플"}}},{"node":{"fields":{"slug":"/Language-Features/06-Record","title":"레코드"}}},{"node":{"fields":{"slug":"/Language-Features/07-Object","title":"객체"}}},{"node":{"fields":{"slug":"/Language-Features/08-Variant","title":"배리언트"}}},{"node":{"fields":{"slug":"/Language-Features/09-Polymorphic-Variant","title":"Polymorphic Variant"}}},{"node":{"fields":{"slug":"/Language-Features/10-Null-Undefined-and-Option","title":"Null, Undefined 그리고 Option"}}},{"node":{"fields":{"slug":"/Language-Features/11-Array-List","title":"배열과 리스트"}}},{"node":{"fields":{"slug":"/Language-Features/12-Function","title":"함수"}}},{"node":{"fields":{"slug":"/Language-Features/13-Control-Flow","title":"제어 흐름"}}},{"node":{"fields":{"slug":"/Language-Features/14-Pipe","title":"파이프"}}},{"node":{"fields":{"slug":"/Language-Features/15-Pattern-Matching-Destructuring","title":"패턴 매칭 / 구조분해"}}},{"node":{"fields":{"slug":"/Language-Features/16-Mutation","title":"가변"}}},{"node":{"fields":{"slug":"/Language-Features/17-JSX","title":"JSX"}}},{"node":{"fields":{"slug":"/Language-Features/18-Exception","title":"예외"}}},{"node":{"fields":{"slug":"/Language-Features/19-Lazy-Value","title":"Lazy Value"}}},{"node":{"fields":{"slug":"/Language-Features/20-Async-Promise","title":"Async & Promise"}}},{"node":{"fields":{"slug":"/Language-Features/21-Module","title":"모듈"}}},{"node":{"fields":{"slug":"/Language-Features/22-Import-Export","title":"Import & Export"}}},{"node":{"fields":{"slug":"/Language-Features/23-Attribute-Decorator","title":"속성 (데코레이터)"}}},{"node":{"fields":{"slug":"/Language-Features/24-Unboxed","title":"언박싱"}}},{"node":{"fields":{"slug":"/Language-Features/25-Reserved-Keyword","title":"예약된 키워드"}}},{"node":{"fields":{"slug":"/Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/03-EditorPlugins","title":"편집기 플러그인"}}},{"node":{"fields":{"slug":"/Overview/04-Migrate-to-ReScript-Syntax","title":"리스크립트 문법으로 변경하기"}}},{"node":{"fields":{"slug":"/Overview/05-Try","title":"CLI로 직접 해보기"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts","title":"메인 컨셉"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management","title":"리액트 훅과 상태 관리"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/01-@deriving(accessors)","title":"@deriving(accessor)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/02-@deriving(jsConverter)","title":"@deriving(jsConverter)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","title":"External (자바스크립트 라이브러리 바인딩)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/02-Shared-Data-Types","title":"데이터 타입 공유"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/01-Embed-Raw-JavaScript","title":"Embed Raw JavaScript"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/03-@deriving(abstract)","title":"@deriving(abstract)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/04-@obj","title":"@obj"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/01-Elements-and-JSX","title":"엘레멘트와 JSX"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/02-Rendering-Elements","title":"엘레멘트 렌더링하기"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/03-Components-and-Props","title":"컴포넌트와 Props"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/04-Arrays-and-Keys","title":"배열과 키"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/05-Refs-and-the-DOM","title":"Refs와 DOM"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/06-Context","title":"컨텍스트"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/01-Hooks-and-State-Management-Overview","title":"리액트 훅과 상태 관리 개요"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/02-useEffect","title":"useEffect"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/03-useState","title":"useState"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/04-useReducer","title":"useReducer"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/05-useContext","title":"useContext"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/06-useRef","title":"useRef"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/07-Build-A-Custom-Hook","title":"커스텀 훅 만들기"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/01-Beyond-JSX","title":"JSX를 넘어서"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/02-Forwarding-Refs","title":"Ref 포워딩하기"}}}]}},"pageContext":{"id":"c7d5839e-f1bb-5f43-b405-127b753221ee"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}