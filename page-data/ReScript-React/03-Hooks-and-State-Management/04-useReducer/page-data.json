{"componentChunkName":"component---src-templates-docs-js","path":"/ReScript-React/03-Hooks-and-State-Management/04-useReducer","result":{"data":{"site":{"siteMetadata":{"title":"ReScript in Korean","docsLocation":"https://github.com/green-labs/rescript-in-korean/tree/main/content"}},"mdx":{"fields":{"id":"7fc8d507-f8a1-5890-a048-3f5ac3c52800","title":"useReducer","slug":"/ReScript-React/03-Hooks-and-State-Management/04-useReducer"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"useReducer\",\n  \"metaTitle\": \"04-useReducer Hook\",\n  \"metaDescription\": \"Details about the useReducer React hook in ReScript\",\n  \"canonical\": \"https://rescript-lang.org/docs/react/latest/hooks-reducer\",\n  \"sourceUrl\": \"https://rescript-lang.org/docs/react/latest/hooks-reducer\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.useReducer\"), \" helps you express your state in an action / reducer pattern.\"), mdx(\"h2\", null, \"\\uC0AC\\uC6A9\\uBC95\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"let (state, dispatch) = React.useReducer(reducer, initialState)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var match = React.useReducer(reducer, initialState);\\n\")), mdx(\"p\", null, \"An alternative to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"./hooks-state\"\n  }), \"useState\"), \". Accepts a reducer of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(state, action) => newState\"), \", and returns the current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state\"), \" paired with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dispatch\"), \" function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(action) => unit\"), \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.useReducer\"), \" is usually preferable to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useState\"), \" when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useReducer\"), \" also lets you optimize performance for components that trigger deep updates because you can pass dispatch down instead of callbacks.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uCC38\\uACE0\"), \" You will notice that the action / reducer pattern works especially well in ReScript due to its \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/rescript-in-korean/docs/manual/latest/record\"\n  }), \"immutable records\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/rescript-in-korean/docs/manual/latest/variant\"\n  }), \"variants\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/rescript-in-korean/docs/manual/latest/pattern-matching-destructuring\"\n  }), \"pattern matching\"), \" features for easy expression of your action and state transitions.\"), mdx(\"h2\", null, \"\\uC608\\uC81C\"), mdx(\"h3\", null, \"React.useReducer\\uB97C \\uC0AC\\uC6A9\\uD55C \\uCE74\\uC6B4\\uD130 \\uC608\\uC81C\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"// Counter.res\\n\\ntype action = Inc | Dec\\ntype state = {count: int}\\n\\nlet reducer = (state, action) => {\\n  switch action {\\n  | Inc => {count: state.count + 1}\\n  | Dec => {count: state.count - 1}\\n  }\\n}\\n\\n@react.component\\nlet make = () => {\\n  let (state, dispatch) = React.useReducer(reducer, {count: 0})\\n\\n  <>\\n    {React.string(\\\"Count:\\\" ++ Belt.Int.toString(state.count))}\\n    <button onClick={(_) => dispatch(Dec)}> {React.string(\\\"-\\\")} </button>\\n    <button onClick={(_) => dispatch(Inc)}> {React.string(\\\"+\\\")} </button>\\n  </>\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function reducer(state, action) {\\n  if (action) {\\n    return {\\n      count: (state.count - 1) | 0,\\n    };\\n  } else {\\n    return {\\n      count: (state.count + 1) | 0,\\n    };\\n  }\\n}\\n\\nfunction Counter(Props) {\\n  var match = React.useReducer(reducer, {\\n    count: 0,\\n  });\\n  var dispatch = match[1];\\n  return React.createElement(\\n    React.Fragment,\\n    undefined,\\n    'Count:' + String(match[0].count),\\n    React.createElement(\\n      'button',\\n      {\\n        onClick: function (param) {\\n          return Curry._1(dispatch, /* Dec */ 1);\\n        },\\n      },\\n      '-'\\n    ),\\n    React.createElement(\\n      'button',\\n      {\\n        onClick: function (param) {\\n          return Curry._1(dispatch, /* Inc */ 0);\\n        },\\n      },\\n      '+'\\n    )\\n  );\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"React guarantees that dispatch function identity is stable and won\\u2019t change on re-renders. This is why it\\u2019s safe to omit from the useEffect or useCallback dependency list.\")), mdx(\"h3\", null, \"\\uB354 \\uBCF5\\uC7A1\\uD55C \\uC561\\uC158\\uC774 \\uD3EC\\uD568 \\uB41C Todo List \\uC571\"), mdx(\"p\", null, \"You can leverage the full power of variants to express actions with data payloads to parametrize your state transitions:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"/* TodoApp.res */\\n\\ntype todo = {\\n  id: int,\\n  content: string,\\n  completed: bool,\\n}\\n\\ntype action =\\n  | AddTodo(string)\\n  | RemoveTodo(int)\\n  | ToggleTodo(int)\\n\\ntype state = {\\n  todos: array<todo>,\\n  nextId: int,\\n}\\n\\nlet reducer = (state, action) =>\\n  switch action {\\n  | AddTodo(content) =>\\n    let todos = Js.Array2.concat(\\n      state.todos,\\n      [{id: state.nextId, content: content, completed: false}],\\n    )\\n    {todos: todos, nextId: state.nextId + 1}\\n  | RemoveTodo(id) =>\\n    let todos = Js.Array2.filter(state.todos, todo => todo.id !== id)\\n    {...state, todos: todos}\\n  | ToggleTodo(id) =>\\n    let todos = Belt.Array.map(state.todos, todo =>\\n      if todo.id === id {\\n        {\\n          ...todo,\\n          completed: !todo.completed,\\n        }\\n      } else {\\n        todo\\n      }\\n    )\\n    {...state, todos: todos}\\n  }\\n\\nlet initialTodos = [{id: 1, content: \\\"Try ReScript & React\\\", completed: false}]\\n\\n@react.component\\nlet make = () => {\\n  let (state, dispatch) = React.useReducer(\\n    reducer,\\n    {todos: initialTodos, nextId: 2},\\n  )\\n\\n  let todos = Belt.Array.map(state.todos, todo =>\\n    <li>\\n      {React.string(todo.content)}\\n      <button onClick={_ => dispatch(RemoveTodo(todo.id))}>\\n        {React.string(\\\"Remove\\\")}\\n      </button>\\n      <input\\n        type_=\\\"checkbox\\\"\\n        checked=todo.completed\\n        onChange={_ => dispatch(ToggleTodo(todo.id))}\\n      />\\n    </li>\\n  )\\n\\n  <> <h1> {React.string(\\\"Todo List:\\\")} </h1> <ul> {React.array(todos)} </ul> </>\\n}\\n\")), mdx(\"h2\", null, \"\\uC9C0\\uC5F0 \\uCD08\\uAE30\\uD654\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"let (state, dispatch) =\\n  React.useReducerWithMapState(reducer, initialState, initial)\\n\")), mdx(\"p\", null, \"You can also create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialState\"), \" lazily. To do this, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.useReducerWithMapState\"), \" and pass an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"init\"), \" function as the third argument. The initial state will be set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"init(initialState)\"), \".\"), mdx(\"p\", null, \"It lets you extract the logic for calculating the initial state outside the reducer. This is also handy for resetting the state later in response to an action:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"/* Counter.res */\\n\\ntype action = Inc | Dec | Reset(int)\\ntype state = {count: int}\\n\\nlet init = initialCount => {\\n  {count: initialCount}\\n}\\n\\nlet reducer = (state, action) => {\\n  switch action {\\n  | Inc => {count: state.count + 1}\\n  | Dec => {count: state.count - 1}\\n  | Reset(count) => init(count)\\n  }\\n}\\n\\n@react.component\\nlet make = (~initialCount: int) => {\\n  let (state, dispatch) = React.useReducerWithMapState(\\n    reducer,\\n    initialCount,\\n    init,\\n  )\\n\\n  <>\\n    {React.string(\\\"Count:\\\" ++ Belt.Int.toString(state.count))}\\n    <button onClick={_ => dispatch(Dec)}> {React.string(\\\"-\\\")} </button>\\n    <button onClick={_ => dispatch(Inc)}> {React.string(\\\"+\\\")} </button>\\n  </>\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#사용법","title":"사용법"},{"url":"#예제","title":"예제","items":[{"url":"#reactusereducer를-사용한-카운터-예제","title":"React.useReducer를 사용한 카운터 예제"},{"url":"#더-복잡한-액션이-포함-된-todo-list-앱","title":"더 복잡한 액션이 포함 된 Todo List 앱"}]},{"url":"#지연-초기화","title":"지연 초기화"}]},"parent":{"__typename":"File","relativePath":"ReScript-React/03-Hooks-and-State-Management/04-useReducer.mdx"},"frontmatter":{"metaTitle":"04-useReducer Hook","metaDescription":"Details about the useReducer React hook in ReScript","sourceUrl":"https://rescript-lang.org/docs/react/latest/hooks-reducer","canonical":"https://rescript-lang.org/docs/react/latest/hooks-reducer"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Build-System","title":"빌드 시스템"}}},{"node":{"fields":{"slug":"/Extra","title":"그 외"}}},{"node":{"fields":{"slug":"/Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/JavaScript-Interop","title":"자바스크립트 인터롭"}}},{"node":{"fields":{"slug":"/Language-Features","title":"언어적인 특징"}}},{"node":{"fields":{"slug":"/Overview","title":"개요"}}},{"node":{"fields":{"slug":"/ReScript-React","title":"ReScript React"}}},{"node":{"fields":{"slug":"/","title":"ReScript in Korean"}}},{"node":{"fields":{"slug":"/Build-System/01-Overview","title":"Build System Overview"}}},{"node":{"fields":{"slug":"/Build-System/02-Configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/Build-System/03-Configuration-Schema","title":"Configuration Schema"}}},{"node":{"fields":{"slug":"/Build-System/05-Performance","title":"Performance"}}},{"node":{"fields":{"slug":"/Extra/01-Newcomer-Examples","title":"초보자를 위한 예제"}}},{"node":{"fields":{"slug":"/Extra/02-Project-Structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/Extra/03-FAQ","title":"자주 묻는 질문"}}},{"node":{"fields":{"slug":"/Guides/01-Converting-from-JS","title":"자바스크립트 파일을 변환하기"}}},{"node":{"fields":{"slug":"/Guides/02-Libraries","title":"Libraries"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/04-Bind-to-JS-Object","title":"자바스크립트 객체에 바인딩하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/05-Bind-to-JS-Function","title":"Bind to JS Function"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/06-Import-from-Export-to-JS","title":"Import from / Export to JS"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","title":"Bind to Global JS Values"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/08-JSON","title":"JSON"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/09-Inlining-Constants","title":"Inlining Constants"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/10-Use-Illegal-Identifier-Names","title":"Use Illegal Identifier Names"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers","title":"인터롭 코드 자동 생성하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/12-Browser-Support-Polyfills","title":"Browser Support & Polyfills"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/13-Interop-Cheatsheet","title":"Interop Cheatsheet"}}},{"node":{"fields":{"slug":"/Language-Features/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Language-Features/02-Let-Binding","title":"Let Binding"}}},{"node":{"fields":{"slug":"/Language-Features/03-Type","title":"타입"}}},{"node":{"fields":{"slug":"/Language-Features/04-Primitive-Types","title":"원시 타입"}}},{"node":{"fields":{"slug":"/Language-Features/05-Tuple","title":"튜플"}}},{"node":{"fields":{"slug":"/Language-Features/06-Record","title":"레코드"}}},{"node":{"fields":{"slug":"/Language-Features/07-Object","title":"객체"}}},{"node":{"fields":{"slug":"/Language-Features/08-Variant","title":"배리언트"}}},{"node":{"fields":{"slug":"/Language-Features/09-Polymorphic-Variant","title":"Polymorphic Variant"}}},{"node":{"fields":{"slug":"/Language-Features/10-Null-Undefined-and-Option","title":"Null, Undefined 그리고 Option"}}},{"node":{"fields":{"slug":"/Language-Features/11-Array-List","title":"배열과 리스트"}}},{"node":{"fields":{"slug":"/Language-Features/12-Function","title":"함수"}}},{"node":{"fields":{"slug":"/Language-Features/13-Control-Flow","title":"제어 흐름"}}},{"node":{"fields":{"slug":"/Language-Features/14-Pipe","title":"파이프"}}},{"node":{"fields":{"slug":"/Language-Features/15-Pattern-Matching-Destructuring","title":"패턴 매칭 / 구조분해"}}},{"node":{"fields":{"slug":"/Language-Features/16-Mutation","title":"가변"}}},{"node":{"fields":{"slug":"/Language-Features/17-JSX","title":"JSX"}}},{"node":{"fields":{"slug":"/Language-Features/18-Exception","title":"예외"}}},{"node":{"fields":{"slug":"/Language-Features/19-Lazy-Value","title":"Lazy Value"}}},{"node":{"fields":{"slug":"/Language-Features/20-Async-Promise","title":"Async & Promise"}}},{"node":{"fields":{"slug":"/Language-Features/21-Module","title":"모듈"}}},{"node":{"fields":{"slug":"/Language-Features/22-Import-Export","title":"Import & Export"}}},{"node":{"fields":{"slug":"/Language-Features/23-Attribute-Decorator","title":"속성 (데코레이터)"}}},{"node":{"fields":{"slug":"/Language-Features/24-Unboxed","title":"언박싱"}}},{"node":{"fields":{"slug":"/Language-Features/25-Reserved-Keyword","title":"예약된 키워드"}}},{"node":{"fields":{"slug":"/Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/03-EditorPlugins","title":"편집기 플러그인"}}},{"node":{"fields":{"slug":"/Overview/04-Migrate-to-ReScript-Syntax","title":"리스크립트 문법으로 변경하기"}}},{"node":{"fields":{"slug":"/Overview/05-Try","title":"CLI로 직접 해보기"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts","title":"메인 컨셉"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","title":"External (자바스크립트 라이브러리 바인딩)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/02-Shared-Data-Types","title":"데이터 타입 공유"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/01-Embed-Raw-JavaScript","title":"Embed Raw JavaScript"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management","title":"리액트 훅과 상태 관리"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/01-@deriving(accessors)","title":"@deriving(accessor)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/02-@deriving(jsConverter)","title":"@deriving(jsConverter)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/03-@deriving(abstract)","title":"@deriving(abstract)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/04-@obj","title":"@obj"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/01-Elements-and-JSX","title":"엘레멘트와 JSX"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/02-Rendering-Elements","title":"엘레멘트 렌더링하기"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/03-Components-and-Props","title":"컴포넌트와 Props"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/04-Arrays-and-Keys","title":"배열과 키"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/05-Refs-and-the-DOM","title":"Refs와 DOM"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/06-Context","title":"컨텍스트"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/01-Hooks-and-State-Management-Overview","title":"리액트 훅과 상태 관리 개요"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/02-useEffect","title":"useEffect"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/03-useState","title":"useState"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/04-useReducer","title":"useReducer"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/05-useContext","title":"useContext"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/06-useRef","title":"useRef"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/07-Build-A-Custom-Hook","title":"커스텀 훅 만들기"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/01-Beyond-JSX","title":"JSX를 넘어서"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/02-Forwarding-Refs","title":"Ref 포워딩하기"}}},{"node":{"fields":{"slug":"/Build-System/04-Interop-with-JS-Build-Systems","title":"Interop with JS Build Systems"}}}]}},"pageContext":{"id":"7fc8d507-f8a1-5890-a048-3f5ac3c52800"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}