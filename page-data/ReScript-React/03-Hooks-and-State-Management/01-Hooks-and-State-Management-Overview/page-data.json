{"componentChunkName":"component---src-templates-docs-js","path":"/ReScript-React/03-Hooks-and-State-Management/01-Hooks-and-State-Management-Overview","result":{"data":{"site":{"siteMetadata":{"title":"ReScript in Korean","docsLocation":"https://github.com/green-labs/rescript-in-korean/tree/main/content"}},"mdx":{"fields":{"id":"e90e1ced-7838-5c7a-b9d4-26a0e5c12ddd","title":"리액트 훅과 상태 관리 개요","slug":"/ReScript-React/03-Hooks-and-State-Management/01-Hooks-and-State-Management-Overview"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"리액트 훅과 상태 관리 개요\",\n  \"metaTitle\": \"01-리액트 훅과 상태 관리 개요(Hooks & State Management Overview)\",\n  \"metaDescription\": \"Overview state management and hooks in ReScript and React\",\n  \"canonical\": \"https://rescript-lang.org/docs/react/latest/hooks-overview\",\n  \"sourceUrl\": \"https://rescript-lang.org/docs/react/latest/hooks-overview\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"\\uB9AC\\uC561\\uD2B8 \\uD6C5 \\uAC1C\\uC694\"), mdx(\"p\", null, \"Hooks are an essential mechanism to introduce and manage state and effects in React components.\"), mdx(\"h2\", null, \"\\uD6C5\\uC774 \\uBB61\\uB2C8\\uAE4C?\"), mdx(\"p\", null, \"In the previous chapters we learned how React components are just a simple function representing UI based on specific prop values. For an application to be useful we still need a way to manipulate those props interactively either via user input or via requests loading in data from a server.\"), mdx(\"p\", null, \"That's were Hooks come in. A Hook is a function that allows us to introduce component state and trigger side-effects for different tasks, such as HTTP requests, direct HTML DOM access, querying window sizes, etc.\"), mdx(\"p\", null, \"In other words: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"It allows us to \\\"hook into\\\" React features.\")), mdx(\"h3\", null, \"Example: The useState Hook\"), mdx(\"p\", null, \"Just for a quick look, here is an example of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Counter\"), \" component that allows a user to click a button and increment an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \" value that will immediately be rendered on each button click:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"// Counter.re\\n@react.component\\nlet make = () => {\\n  let (count, setCount) = React.useState(_ => 0);\\n\\n  let onClick = (_evt) => {\\n    setCount(prev => prev + 1)\\n  };\\n\\n  let msg = \\\"You clicked\\\" ++ Belt.Int.toString(count) ++  \\\"times\\\"\\n\\n  <div>\\n    <p>{React.string(msg)}</p>\\n    <button onClick> {React.string(\\\"Click me\\\")} </button>\\n  </div>\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function Counter(Props) {\\n  var match = React.useState(function() {\\n    return 0;\\n  });\\n  var setCount = match[1];\\n  var onClick = function(_evt) {\\n    return Curry._1(setCount, function(prev) {\\n      return (prev + 1) | 0;\\n    });\\n  };\\n  var msg = 'You clicked' + String(match[0]) + 'times';\\n  return React.createElement(\\n    'div',\\n    undefined,\\n    React.createElement('p', undefined, msg),\\n    React.createElement(\\n      'button',\\n      {\\n        onClick: onClick,\\n      },\\n      'Click me'\\n    )\\n  );\\n}\\n\")), mdx(\"p\", null, \"Here we are using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.useState\"), \" Hook. We call it inside a component function to add some local state to it. React will preserve this state between re-renders. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.useState\"), \" returns a tuple: the current state value (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \") and a function that lets you update it (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setCount\"), \"). You can call this function from an event handler or pass it down to other components to call the function.\"), mdx(\"p\", null, \"The only argument to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.useState\"), \" is a function that returns the initial state (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_ => 0\"), \"). In the example above, it is 0 because our counter starts from zero. Note that your state can be any type you want and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ReScript\"), \" will make sure to infer the types for you (only make sure to return an initial state that matches your type). The initial state argument is only used during the first render.\"), mdx(\"p\", null, \"This was just a quick example on our first hook usage. We will go into more detail in a dedicated \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"./hooks-state\"\n  }), \"useState\"), \" section.\"), mdx(\"h2\", null, \"Available Hooks\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uCC38\\uACE0\"), \" All hooks are part of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React\"), \" module (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.useState\"), \").\"), mdx(\"h3\", null, \"Basic Hooks:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"./hooks-state\"\n  }), \"useState\"), \": Adds local state to your component\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"./hooks-effect\"\n  }), \"useEffect\"), \": Runs side-effectual code within your component\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"./hooks-context\"\n  }), \"useContext\"), \": Gives your component to a React Context value\")), mdx(\"h3\", null, \"Additional Hooks:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"./hooks-reducer\"\n  }), \"useReducer\"), \": An alternative to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useState\"), \". Uses the state / action / reduce pattern.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"./hooks-ref\"\n  }), \"useRef\"), \": Returns a mutable React-Ref value\")), mdx(\"h2\", null, \"Rules of Hooks\"), mdx(\"p\", null, \"Hooks are just simple functions, but you need to follow \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"two rules\"), \" when using them. ReScript doesn't enforce those rules within the compiler, so if you really want to enforce correct hooks conventions, you can use an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/eslint-plugin-react-hooks\"\n  }), \"eslint-plugin\"), \" to check your compiled JS output.\"), mdx(\"h3\", null, \"Rule 1) Only Call Hooks at the Top Level\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Don\\u2019t call Hooks inside loops, conditions, or nested functions.\"), \" Instead, always use Hooks at the top level of your React function. By following this rule, you ensure that Hooks are called in the same order each time a component renders. That\\u2019s what allows React to correctly preserve the state of Hooks between multiple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useState\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" calls. (If you\\u2019re curious, you can check out the in depth explanation in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/hooks-rules.html#explanation\"\n  }), \"ReactJS Hooks docs\"), \")\"), mdx(\"h3\", null, \"Rule 2) Only Call Hooks from React Functions\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Don't call Hooks from regular functions.\"), \" Instead, you can:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u2705 Call Hooks from React function components.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u2705 Call Hooks from custom Hooks (we\\u2019ll learn about them in our \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"./hooks-custom\"\n  }), \"custom hooks\"), \" section).\")), mdx(\"p\", null, \"By following this rule, you ensure that all stateful logic in a component is clearly visible from its source code.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#리액트-훅-개요","title":"리액트 훅 개요","items":[{"url":"#훅이-뭡니까","title":"훅이 뭡니까?","items":[{"url":"#example-the-usestate-hook","title":"Example: The useState Hook"}]},{"url":"#available-hooks","title":"Available Hooks","items":[{"url":"#basic-hooks","title":"Basic Hooks:"},{"url":"#additional-hooks","title":"Additional Hooks:"}]},{"url":"#rules-of-hooks","title":"Rules of Hooks","items":[{"url":"#rule-1-only-call-hooks-at-the-top-level","title":"Rule 1) Only Call Hooks at the Top Level"},{"url":"#rule-2-only-call-hooks-from-react-functions","title":"Rule 2) Only Call Hooks from React Functions"}]}]}]},"parent":{"__typename":"File","relativePath":"ReScript-React/03-Hooks-and-State-Management/01-Hooks-and-State-Management-Overview.mdx"},"frontmatter":{"metaTitle":"01-리액트 훅과 상태 관리 개요(Hooks & State Management Overview)","metaDescription":"Overview state management and hooks in ReScript and React","sourceUrl":"https://rescript-lang.org/docs/react/latest/hooks-overview","canonical":"https://rescript-lang.org/docs/react/latest/hooks-overview"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Build-System","title":"빌드 시스템"}}},{"node":{"fields":{"slug":"/Extra","title":"그 외"}}},{"node":{"fields":{"slug":"/Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/JavaScript-Interop","title":"자바스크립트 인터롭"}}},{"node":{"fields":{"slug":"/Language-Features","title":"언어적인 특징"}}},{"node":{"fields":{"slug":"/Overview","title":"개요"}}},{"node":{"fields":{"slug":"/ReScript-React","title":"ReScript React"}}},{"node":{"fields":{"slug":"/","title":"ReScript in Korean"}}},{"node":{"fields":{"slug":"/Build-System/01-Overview","title":"Build System Overview"}}},{"node":{"fields":{"slug":"/Build-System/02-Configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/Build-System/03-Configuration-Schema","title":"Configuration Schema"}}},{"node":{"fields":{"slug":"/Build-System/04-Interop-with-JS-Build-Systems","title":"Interop with JS Build Systems"}}},{"node":{"fields":{"slug":"/Build-System/05-Performance","title":"Performance"}}},{"node":{"fields":{"slug":"/Extra/01-Newcomer-Examples","title":"초보자를 위한 예제"}}},{"node":{"fields":{"slug":"/Extra/02-Project-Structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/Extra/03-FAQ","title":"자주 묻는 질문"}}},{"node":{"fields":{"slug":"/Guides/01-Converting-from-JS","title":"자바스크립트 파일을 변환하기"}}},{"node":{"fields":{"slug":"/Guides/02-Libraries","title":"Libraries"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/04-Bind-to-JS-Object","title":"자바스크립트 객체에 바인딩하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/05-Bind-to-JS-Function","title":"Bind to JS Function"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/06-Import-from-Export-to-JS","title":"Import from / Export to JS"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","title":"Bind to Global JS Values"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/08-JSON","title":"JSON"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/09-Inlining-Constants","title":"Inlining Constants"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/10-Use-Illegal-Identifier-Names","title":"Use Illegal Identifier Names"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers","title":"인터롭 코드 자동 생성하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/12-Browser-Support-Polyfills","title":"Browser Support & Polyfills"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/13-Interop-Cheatsheet","title":"Interop Cheatsheet"}}},{"node":{"fields":{"slug":"/Language-Features/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Language-Features/02-Let-Binding","title":"Let Binding"}}},{"node":{"fields":{"slug":"/Language-Features/03-Type","title":"타입"}}},{"node":{"fields":{"slug":"/Language-Features/04-Primitive-Types","title":"원시 타입"}}},{"node":{"fields":{"slug":"/Language-Features/05-Tuple","title":"튜플"}}},{"node":{"fields":{"slug":"/Language-Features/06-Record","title":"레코드"}}},{"node":{"fields":{"slug":"/Language-Features/07-Object","title":"객체"}}},{"node":{"fields":{"slug":"/Language-Features/08-Variant","title":"배리언트"}}},{"node":{"fields":{"slug":"/Language-Features/09-Polymorphic-Variant","title":"Polymorphic Variant"}}},{"node":{"fields":{"slug":"/Language-Features/10-Null-Undefined-and-Option","title":"Null, Undefined 그리고 Option"}}},{"node":{"fields":{"slug":"/Language-Features/11-Array-List","title":"배열과 리스트"}}},{"node":{"fields":{"slug":"/Language-Features/12-Function","title":"함수"}}},{"node":{"fields":{"slug":"/Language-Features/13-Control-Flow","title":"제어 흐름"}}},{"node":{"fields":{"slug":"/Language-Features/14-Pipe","title":"파이프"}}},{"node":{"fields":{"slug":"/Language-Features/15-Pattern-Matching-Destructuring","title":"패턴 매칭 / 구조분해"}}},{"node":{"fields":{"slug":"/Language-Features/16-Mutation","title":"가변"}}},{"node":{"fields":{"slug":"/Language-Features/17-JSX","title":"JSX"}}},{"node":{"fields":{"slug":"/Language-Features/18-Exception","title":"예외"}}},{"node":{"fields":{"slug":"/Language-Features/19-Lazy-Value","title":"Lazy Value"}}},{"node":{"fields":{"slug":"/Language-Features/20-Async-Promise","title":"Async & Promise"}}},{"node":{"fields":{"slug":"/Language-Features/21-Module","title":"모듈"}}},{"node":{"fields":{"slug":"/Language-Features/22-Import-Export","title":"Import & Export"}}},{"node":{"fields":{"slug":"/Language-Features/23-Attribute-Decorator","title":"속성 (데코레이터)"}}},{"node":{"fields":{"slug":"/Language-Features/24-Unboxed","title":"언박싱"}}},{"node":{"fields":{"slug":"/Language-Features/25-Reserved-Keyword","title":"예약된 키워드"}}},{"node":{"fields":{"slug":"/Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/03-EditorPlugins","title":"편집기 플러그인"}}},{"node":{"fields":{"slug":"/Overview/04-Migrate-to-ReScript-Syntax","title":"리스크립트 문법으로 변경하기"}}},{"node":{"fields":{"slug":"/Overview/05-Try","title":"CLI로 직접 해보기"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts","title":"메인 컨셉"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management","title":"리액트 훅과 상태 관리"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/01-@deriving(accessors)","title":"@deriving(accessor)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/02-@deriving(jsConverter)","title":"@deriving(jsConverter)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","title":"External (자바스크립트 라이브러리 바인딩)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/02-Shared-Data-Types","title":"데이터 타입 공유"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/01-Embed-Raw-JavaScript","title":"Embed Raw JavaScript"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/03-@deriving(abstract)","title":"@deriving(abstract)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/04-@obj","title":"@obj"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/01-Elements-and-JSX","title":"엘레멘트와 JSX"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/02-Rendering-Elements","title":"엘레멘트 렌더링하기"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/03-Components-and-Props","title":"컴포넌트와 Props"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/04-Arrays-and-Keys","title":"배열과 키"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/05-Refs-and-the-DOM","title":"Refs와 DOM"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/06-Context","title":"컨텍스트"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/01-Hooks-and-State-Management-Overview","title":"리액트 훅과 상태 관리 개요"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/02-useEffect","title":"useEffect"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/03-useState","title":"useState"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/04-useReducer","title":"useReducer"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/05-useContext","title":"useContext"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/06-useRef","title":"useRef"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/07-Build-A-Custom-Hook","title":"커스텀 훅 만들기"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/01-Beyond-JSX","title":"JSX를 넘어서"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/02-Forwarding-Refs","title":"Ref 포워딩하기"}}}]}},"pageContext":{"id":"e90e1ced-7838-5c7a-b9d4-26a0e5c12ddd"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}