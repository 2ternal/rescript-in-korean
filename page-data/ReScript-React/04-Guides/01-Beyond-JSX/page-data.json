{"componentChunkName":"component---src-templates-docs-js","path":"/ReScript-React/04-Guides/01-Beyond-JSX","result":{"data":{"site":{"siteMetadata":{"title":"ReScript in Korean","docsLocation":"https://github.com/green-labs/rescript-in-korean/tree/main/content"}},"mdx":{"fields":{"id":"6f573597-08c2-5c06-9f81-a48b7c06d819","title":"JSX를 넘어서","slug":"/ReScript-React/04-Guides/01-Beyond-JSX"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JSX를 넘어서\",\n  \"metaTitle\": \"01-JSX를 넘어서(Beyond JSX)\",\n  \"metaDescription\": \"Details on how to use ReScript and React without JSX\",\n  \"canonical\": \"https://rescript-lang.org/docs/react/latest/beyond-jsx\",\n  \"sourceUrl\": \"https://rescript-lang.org/docs/react/latest/beyond-jsx\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"JSX is a syntax sugar that allows us to use React components in an HTML like manner. A component needs to adhere to certain interface conventions, otherwise it can't be used in JSX. This section will go into detail on how the JSX transformation works and what React APIs are used underneath.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uCC38\\uACE0\"), \" This section requires knowledge about the low level apis for \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./elements-and-jsx#creating-elements-from-component-functions\"\n  }, \"creating elements\"), \", such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.createElement\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ReactDOMRe.createDOMElementVariadic\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uCC38\\uACE0\"), \" This page assumes your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsconfig.json\"), \" to be set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"reason\\\": { \\\"react-jsx\\\": 3 }\"), \" to apply the right JSX transformations.\")), mdx(\"h2\", null, \"Component Types\"), mdx(\"p\", null, \"A plain React component is defined as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"('props) => React.element\"), \" function. You can also express a component more efficiently with our shorthand type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.component('props)\"), \".\"), mdx(\"p\", null, \"Here are some examples on how to define your own component types (often useful when interoping with existing JS code, or passing around components):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"// Plain function type\\ntype friendComp =\\n  ({\\\"name\\\": string, \\\"online\\\": bool}) => React.element;\\n\\n// Equivalent to\\n// ({\\\"padding\\\": string, \\\"children\\\": React.element}) => React.element\\ntype containerComp =\\n  React.component({\\n    \\\"padding\\\": string,\\n    \\\"children\\\": React.element\\n  });\\n\")), mdx(\"p\", null, \"The types above are pretty low level (basically the JS representation of a React component), but since ReScript React has its own ways of defining React components in a more language specific way, let's have a closer look on the anatomy of such a construct.\"), mdx(\"h2\", null, \"JSX Component Interface\"), mdx(\"p\", null, \"A ReScript React component needs to be a (sub-)module with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"make\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"makeProps\"), \" function to be usable in JSX. To make things easier, we provide a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@react.component\"), \" decorator to create those functions for you:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"module Friend = {\\n  @react.component\\n  let make = (~name: string, ~children) => {\\n    <div>\\n      {React.string(name)}\\n      children\\n    </div>\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"module Friend = {\\n  @obj\\n  external makeProps: (\\n    ~name: string,\\n    ~children: 'children,\\n    ~key: string=?,\\n    unit) => {. \\\"name\\\": string, \\\"children\\\": 'children'} = \\\"\\\";\\n\\n  let make = (props: {. \\\"name\\\": string, \\\"children\\\": 'children}) => {\\n    // React element creation from the original make function\\n  }\\n}\\n\")), mdx(\"p\", null, \"In the expanded output:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"makeProps\"), \": A function that receives multiple labeled arguments (according to prop names) and returns the value that is consumed by make(props)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"make\"), \": A converted \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"make\"), \" function that complies to the component interface \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(props) => React.element\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uCC38\\uACE0\"), \" The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"makeProps\"), \" function will also always contain a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~key\"), \" prop.\"), mdx(\"h3\", null, \"Special Case React.forwardRef\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@react.component\"), \" decorator also works for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.forwardRef\"), \" calls:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"module FancyInput = {\\n  @react.component\\n  let make = React.forwardRef((~className=?, ~children, ref_) =>\\n    <div>\\n      // use ref_ here\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"// Simplified Output\\nmodule FancyInput = {\\n  @obj\\n  external makeProps: (\\n    ~className: 'className=?,\\n    ~children: 'children,\\n    ~key: string=?,\\n    ~ref: 'ref=?,\\n    unit,\\n  ) => {\\\"className\\\": option<'className>, \\\"children\\\": 'children} = \\\"\\\"\\n\\n  let make =\\n    (~className=?, ~children) => ref_ => ReactDOMRe.createDOMElementVariadic(\\\"div\\\", [])\\n\\n  let make = React.forwardRef(\\n    (props: {\\\"className\\\": option<'className>, \\\"children\\\": 'children}, ref_,) => {\\n      make(\\n        ~className=props[\\\"className\\\"],\\n        ~children=props[\\\"children\\\"],\\n        ref_)\\n    })\\n}\\n\")), mdx(\"p\", null, \"As shown in the expanded output above, our decorator desugars the function passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.forwardRef\"), \" in the same manner as a typical component \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"make\"), \" function. It also creates a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"makeProps\"), \" function with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ref\"), \" prop, so we can use it in our JSX call (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FancyInput ref=.../>\"), \").\"), mdx(\"p\", null, \"So now that we know how the ReScript React component transformation works, let's have a look on how ReScript transforms our JSX constructs.\"), mdx(\"h2\", null, \"JSX Under the Hood\"), mdx(\"p\", null, \"Whenever we are using JSX with a custom component (\\\"capitalized JSX\\\"), we are actually using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.createElement\"), \" to create a new element. Here is an example of a React component without children:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"<Friend name=\\\"Fred\\\" age=1 />\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"React.createElement(Friend.make, Friend.makeProps(~name=\\\"Fred\\\", ~age=1, ()))\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"React.createElement(Playground$Friend, { name: 'Fred', age: 20 });\\n\")), mdx(\"p\", null, \"As you can see, it uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Friend.make\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Friend.makeProps\"), \" to call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.createElement\"), \" API. In case you are providing children, it will use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.createElementVariadic\"), \" instead (which is just a different binding for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.createElement\"), \"):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"<Container width=200>\\n  {React.string(\\\"Hello\\\")}\\n  {React.string(\\\"World\\\")}\\n</Container>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"React.createElementVariadic(\\n  Container.make,\\n  Container.makeProps(~width=200, ~children=React.null, ()),\\n  [{React.string(\\\"Hello\\\")}, {React.string(\\\"World\\\")}],\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"React.createElement(Container, { width: 200, children: null }, 'Hello', 'World');\\n\")), mdx(\"p\", null, \"Note that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~children=React.null\"), \" prop has no relevance since React will only care about the children array passed as a third argument.\"), mdx(\"h3\", null, \"Dom Elements\"), mdx(\"p\", null, \"\\\"Uncapitalized JSX\\\" expressions are treated as DOM elements and will be converted to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ReactDOMRe.createDOMElementVariadic\"), \" calls:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"<div title=\\\"test\\\"/>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"ReactDOMRe.createDOMElementVariadic(\\\"div\\\", ~props=ReactDOMRe.domProps(~title=\\\"test\\\", ()), [])\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"React.createElement('div', { title: 'test' });\\n\")), mdx(\"p\", null, \"The same goes for uncapitalized JSX with children:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"<div title=\\\"test\\\">\\n  <span/>\\n</div>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"ReactDOMRe.createDOMElementVariadic(\\n  \\\"div\\\",\\n  ~props=ReactDOMRe.domProps(~title=\\\"test\\\", ()),\\n  [ReactDOMRe.createDOMElementVariadic(\\\"span\\\", [])],\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"React.createElement('div', { title: 'test' }, React.createElement('span', undefined));\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#component-types","title":"Component Types"},{"url":"#jsx-component-interface","title":"JSX Component Interface","items":[{"url":"#special-case-reactforwardref","title":"Special Case React.forwardRef"}]},{"url":"#jsx-under-the-hood","title":"JSX Under the Hood","items":[{"url":"#dom-elements","title":"Dom Elements"}]}]},"parent":{"__typename":"File","relativePath":"ReScript-React/04-Guides/01-Beyond-JSX.mdx"},"frontmatter":{"metaTitle":"01-JSX를 넘어서(Beyond JSX)","metaDescription":"Details on how to use ReScript and React without JSX","sourceUrl":"https://rescript-lang.org/docs/react/latest/beyond-jsx","canonical":"https://rescript-lang.org/docs/react/latest/beyond-jsx"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Extra","title":"그 외"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/02-Rendering-Elements","title":"엘레멘트 렌더링하기"}}},{"node":{"fields":{"slug":"/Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/04-Bind-to-JS-Object","title":"자바스크립트 객체에 바인딩하기"}}},{"node":{"fields":{"slug":"/Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Language-Features","title":"언어적인 특징"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts","title":"메인 컨셉"}}},{"node":{"fields":{"slug":"/JavaScript-Interop","title":"자바스크립트 인터롭"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management","title":"리액트 훅과 상태 관리"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Build-System","title":"빌드 시스템"}}},{"node":{"fields":{"slug":"/ReScript-React","title":"ReScript React"}}},{"node":{"fields":{"slug":"/","title":"ReScript in Korean"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/02-Forwarding-Refs","title":"Ref 포워딩하기"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/01-Beyond-JSX","title":"JSX를 넘어서"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/01-Hooks-and-State-Management-Overview","title":"리액트 훅과 상태 관리 개요"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/02-useEffect","title":"useEffect"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/03-useState","title":"useState"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/05-useContext","title":"useContext"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/04-useReducer","title":"useReducer"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/06-useRef","title":"useRef"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/07-Build-A-Custom-Hook","title":"커스텀 훅 만들기"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/04-Arrays-and-Keys","title":"배열과 키"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/05-Refs-and-the-DOM","title":"Refs와 DOM"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/03-Components-and-Props","title":"컴포넌트와 Props"}}},{"node":{"fields":{"slug":"/Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/06-Context","title":"컨텍스트"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/03-EditorPlugins","title":"편집기 플러그인"}}},{"node":{"fields":{"slug":"/Language-Features/02-Let-Binding","title":"Let Binding"}}},{"node":{"fields":{"slug":"/Language-Features/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Overview/04-Migrate-to-ReScript-Syntax","title":"리스크립트 문법으로 변경하기"}}},{"node":{"fields":{"slug":"/Language-Features/06-Record","title":"레코드"}}},{"node":{"fields":{"slug":"/Language-Features/03-Type","title":"타입"}}},{"node":{"fields":{"slug":"/Overview/05-Try","title":"CLI로 직접 해보기"}}},{"node":{"fields":{"slug":"/Language-Features/04-Primitive-Types","title":"원시 타입"}}},{"node":{"fields":{"slug":"/Language-Features/10-Null-Undefined-and-Option","title":"Null, Undefined 그리고 Option"}}},{"node":{"fields":{"slug":"/Language-Features/05-Tuple","title":"튜플"}}},{"node":{"fields":{"slug":"/Language-Features/08-Variant","title":"배리언트"}}},{"node":{"fields":{"slug":"/Language-Features/09-Polymorphic-Variant","title":"Polymorphic Variant"}}},{"node":{"fields":{"slug":"/Language-Features/11-Array-List","title":"배열과 리스트"}}},{"node":{"fields":{"slug":"/Language-Features/13-Control-Flow","title":"제어 흐름"}}},{"node":{"fields":{"slug":"/Language-Features/14-Pipe","title":"파이프"}}},{"node":{"fields":{"slug":"/Language-Features/15-Pattern-Matching-Destructuring","title":"패턴 매칭 / 구조분해"}}},{"node":{"fields":{"slug":"/Language-Features/17-JSX","title":"JSX"}}},{"node":{"fields":{"slug":"/Language-Features/16-Mutation","title":"가변"}}},{"node":{"fields":{"slug":"/Language-Features/18-Exception","title":"예외"}}},{"node":{"fields":{"slug":"/Language-Features/12-Function","title":"함수"}}},{"node":{"fields":{"slug":"/Language-Features/20-Async-Promise","title":"Async & Promise"}}},{"node":{"fields":{"slug":"/Language-Features/19-Lazy-Value","title":"Lazy Value"}}},{"node":{"fields":{"slug":"/Language-Features/22-Import-Export","title":"Import & Export"}}},{"node":{"fields":{"slug":"/Language-Features/21-Module","title":"모듈"}}},{"node":{"fields":{"slug":"/Language-Features/23-Attribute-Decorator","title":"속성 (데코레이터)"}}},{"node":{"fields":{"slug":"/Language-Features/25-Reserved-Keyword","title":"예약된 키워드"}}},{"node":{"fields":{"slug":"/Language-Features/07-Object","title":"객체"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/02-Shared-Data-Types","title":"데이터 타입 공유"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","title":"External (자바스크립트 라이브러리 바인딩)"}}},{"node":{"fields":{"slug":"/Language-Features/24-Unboxed","title":"언박싱"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","title":"Bind to Global JS Values"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/01-Embed-Raw-JavaScript","title":"Embed Raw JavaScript"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/08-JSON","title":"JSON"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/05-Bind-to-JS-Function","title":"Bind to JS Function"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/06-Import-from-Export-to-JS","title":"Import from / Export to JS"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/09-Inlining-Constants","title":"Inlining Constants"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/10-Use-Illegal-Identifier-Names","title":"Use Illegal Identifier Names"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/12-Browser-Support-Polyfills","title":"Browser Support & Polyfills"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers","title":"인터롭 코드 자동 생성하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/13-Interop-Cheatsheet","title":"Interop Cheatsheet"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/01-@deriving(accessors)","title":"@deriving(accessor)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/02-@deriving(jsConverter)","title":"@deriving(jsConverter)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/03-@deriving(abstract)","title":"@deriving(abstract)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/04-@obj","title":"@obj"}}},{"node":{"fields":{"slug":"/Guides/01-Converting-from-JS","title":"자바스크립트 파일을 변환하기"}}},{"node":{"fields":{"slug":"/Guides/02-Libraries","title":"Libraries"}}},{"node":{"fields":{"slug":"/Extra/01-Newcomer-Examples","title":"초보자를 위한 예제"}}},{"node":{"fields":{"slug":"/Extra/02-Project-Structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/Extra/03-FAQ","title":"자주 묻는 질문"}}},{"node":{"fields":{"slug":"/Build-System/03-Configuration-Schema","title":"Configuration Schema"}}},{"node":{"fields":{"slug":"/Build-System/04-Interop-with-JS-Build-Systems","title":"Interop with JS Build Systems"}}},{"node":{"fields":{"slug":"/Build-System/01-Overview","title":"Build System Overview"}}},{"node":{"fields":{"slug":"/Build-System/05-Performance","title":"Performance"}}},{"node":{"fields":{"slug":"/Build-System/02-Configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/01-Elements-and-JSX","title":"엘레멘트와 JSX"}}}]}},"pageContext":{"id":"6f573597-08c2-5c06-9f81-a48b7c06d819"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}