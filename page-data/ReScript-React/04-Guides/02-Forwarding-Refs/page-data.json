{"componentChunkName":"component---src-templates-docs-js","path":"/ReScript-React/04-Guides/02-Forwarding-Refs","result":{"data":{"site":{"siteMetadata":{"title":"ReScript in Korean","docsLocation":"https://github.com/green-labs/rescript-in-korean/tree/main/content"}},"mdx":{"fields":{"id":"e231deef-0e57-5b52-a6a8-180c8d640db4","title":"Ref 포워딩하기","slug":"/ReScript-React/04-Guides/02-Forwarding-Refs"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Ref 포워딩하기\",\n  \"metaTitle\": \"02-Ref 포워딩하기(Forwarding Refs)\",\n  \"metaDescription\": \"Forwarding Ref values in ReScript and React\",\n  \"canonical\": \"https://rescript-lang.org/docs/react/latest/forwarding-refs\",\n  \"sourceUrl\": \"https://rescript-lang.org/docs/react/latest/forwarding-refs\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Ref forwarding is a technique for automatically passing a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"./refs-and-the-dom\"\n  }), \"React.ref\"), \" through a component to one of its children. This is typically not necessary for most components in the application. However, it can be useful for some kinds of components, especially in reusable component libraries. The most common scenarios are described below.\"), mdx(\"h2\", null, \"\\uC65C Ref\\uB97C \\uD3EC\\uC6CC\\uB529\\uD574\\uC57C \\uD558\\uB098\\uC694?\"), mdx(\"p\", null, \"Consider a FancyButton component that renders the native button DOM element:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"// FancyButton.res\\n\\n@react.component\\nlet make = (~children) => {\\n  <button className=\\\"FancyButton\\\">\\n    children\\n  </button>\\n}\\n\")), mdx(\"p\", null, \"React components hide their implementation details, including their rendered output. Other components using FancyButton \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"usually will not need\"), \" to obtain a ref to the inner button DOM element. This is good because it prevents components from relying on each other\\u2019s DOM structure too much.\"), mdx(\"p\", null, \"Although such encapsulation is desirable for application-level components like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FeedStory\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Comment\"), \", it can be inconvenient for highly reusable \\u201Cleaf\\u201D components like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FancyButton\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyTextInput\"), \". These components tend to be used throughout the application in a similar manner as a regular DOM button and input, and accessing their DOM nodes may be unavoidable for managing focus, selection, or animations.\"), mdx(\"p\", null, \"There are currently two strategies on forwarding refs through a component. In ReScript and React we strongly recommend \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"passing your ref as a prop\"), \", but there is also a dedicated API called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.forwardRef\"), \".\"), mdx(\"p\", null, \"We will discuss both methods in this document.\"), mdx(\"h2\", null, \"Props\\uB97C \\uD1B5\\uD55C Ref \\uD3EC\\uC6CC\\uB4DC\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.ref\"), \" can be passed down like any other prop. The component will take care of forwarding the ref to the right DOM element.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"No new concepts to learn!\")), mdx(\"p\", null, \"In the example below, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FancyInput\"), \" defines a prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inputRef\"), \" that will be forwarded to its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"input\"), \" element:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"// App.res\\n\\nmodule FancyInput = {\\n  @react.component\\n  let make = (~children, ~inputRef: ReactDOM.domRef) =>\\n    <div> <input type_=\\\"text\\\" ref=inputRef /> children </div>\\n}\\n\\n@bs.send external focus: Dom.element => unit = \\\"focus\\\"\\n\\n@react.component\\nlet make = () => {\\n  let input = React.useRef(Js.Nullable.null)\\n\\n  let focusInput = () =>\\n    input.current\\n    ->Js.Nullable.toOption\\n    ->Belt.Option.forEach(input => input->focus)\\n\\n  let onClick = _ => focusInput()\\n\\n  <div>\\n    <FancyInput inputRef={ReactDOM.Ref.domRef(input)}>\\n      <button onClick> {React.string(\\\"Click to focus\\\")} </button>\\n    </FancyInput>\\n  </div>\\n}\\n\")), mdx(\"p\", null, \"We use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ReactDOM.domRef\"), \" type to represent our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inputRef\"), \". We pass our ref in the exact same manner as we'd do a DOM \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ref\"), \" attribute (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<input ref={ReactDOM.Ref.domRef(myRef)} />\"), \").\"), mdx(\"h2\", null, \"(Discouraged) React.forwardRef\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uCC38\\uACE0\"), \" We discourage this method since it \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/dan_abramov/status/1173372190395445251\"\n  }), \"will likely go away\"), \" at some point, and doesn't yield any obvious advantages over the previously mentioned ref prop passing.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.forwardRef\"), \" offers a way to \\\"emulate a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ref\"), \" prop\\\" within custom components. Internally the component will forward the passed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ref\"), \" value to the target DOM element instead.\"), mdx(\"p\", null, \"This is how the previous example would look like with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.forwardRef\"), \" approach:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"// App.res\\n\\nmodule FancyInput = {\\n  @react.component\\n  let make = React.forwardRef((~className=?, ~children, ref_) =>\\n    <div>\\n      <input\\n        type_=\\\"text\\\"\\n        ?className\\n        ref=?{Js.Nullable.toOption(ref_)->Belt.Option.map(\\n          ReactDOMRe.Ref.domRef,\\n        )}\\n      />\\n      children\\n    </div>\\n  )\\n}\\n\\n@bs.send external focus: Dom.element => unit = \\\"focus\\\"\\n\\n@react.component\\nlet make = () => {\\n  let input = React.useRef(Js.Nullable.null)\\n\\n  let focusInput = () =>\\n    input.current\\n    ->Js.Nullable.toOption\\n    ->Belt.Option.forEach(input => input->focus)\\n\\n  let onClick = _ => focusInput()\\n\\n  <div>\\n    <FancyInput className=\\\"fancy\\\" ref=input>\\n      <button onClick> {React.string(\\\"Click to focus\\\")} </button>\\n    </FancyInput>\\n  </div>\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var React = require('react');\\nvar Belt_Option = require('./stdlib/belt_Option.js');\\nvar Caml_option = require('./stdlib/caml_option.js');\\n\\nvar make = React.forwardRef(function(Props, ref_) {\\n  var className = Props.className;\\n  var children = Props.children;\\n  var tmp = {\\n    type: 'text',\\n  };\\n  var tmp$1 = Belt_Option.map(ref_ == null ? undefined : Caml_option.some(ref_), function(prim) {\\n    return prim;\\n  });\\n  if (tmp$1 !== undefined) {\\n    tmp.ref = Caml_option.valFromOption(tmp$1);\\n  }\\n  if (className !== undefined) {\\n    tmp.className = Caml_option.valFromOption(className);\\n  }\\n  return React.createElement('div', undefined, React.createElement('input', tmp), children);\\n});\\n\\nvar FancyInput = {\\n  make: make,\\n};\\n\\nfunction App(Props) {\\n  var input = React.useRef(null);\\n  var onClick = function(param) {\\n    return Belt_Option.forEach(Caml_option.nullable_to_opt(input.current), function(input) {\\n      input.focus();\\n    });\\n  };\\n  return React.createElement(\\n    'div',\\n    undefined,\\n    React.createElement(make, {\\n      className: 'fancy',\\n      children: React.createElement(\\n        'button',\\n        {\\n          onClick: onClick,\\n        },\\n        'Click to focus'\\n      ),\\n      ref: input,\\n    })\\n  );\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uCC38\\uACE0\"), \" Our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@react.component\"), \" decorator transforms our labeled argument props within our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.forwardRef\"), \" function in the same manner as our classic \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"make\"), \" function.\"), mdx(\"p\", null, \"This way, components using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FancyInput\"), \" can get a ref to the underlying \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"input\"), \" DOM node and access it if necessary\\u2014just like if they used a DOM \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"input\"), \" directly.\"), mdx(\"h2\", null, \"\\uCEF4\\uD3EC\\uB10C\\uD2B8 \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC \\uAD00\\uB9AC\\uC790\\uB97C \\uC704\\uD55C \\uCC38\\uACE0\\uC0AC\\uD56D\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"When you start using ref forwarding in a component library, you should treat it as a breaking change and release a new major version of your library\"), \". This is because your library likely has an observably different behavior (such as what refs get assigned to, and what types are exported), and this can break apps and other libraries that depend on the old behavior.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#왜-ref를-포워딩해야-하나요","title":"왜 Ref를 포워딩해야 하나요?"},{"url":"#props를-통한-ref-포워드","title":"Props를 통한 Ref 포워드"},{"url":"#discouraged-reactforwardref","title":"(Discouraged) React.forwardRef"},{"url":"#컴포넌트-라이브러리-관리자를-위한-참고사항","title":"컴포넌트 라이브러리 관리자를 위한 참고사항"}]},"parent":{"__typename":"File","relativePath":"ReScript-React/04-Guides/02-Forwarding-Refs.mdx"},"frontmatter":{"metaTitle":"02-Ref 포워딩하기(Forwarding Refs)","metaDescription":"Forwarding Ref values in ReScript and React","sourceUrl":"https://rescript-lang.org/docs/react/latest/forwarding-refs","canonical":"https://rescript-lang.org/docs/react/latest/forwarding-refs"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Build-System","title":"빌드 시스템"}}},{"node":{"fields":{"slug":"/Extra","title":"그 외"}}},{"node":{"fields":{"slug":"/Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/JavaScript-Interop","title":"자바스크립트 인터롭"}}},{"node":{"fields":{"slug":"/Language-Features","title":"언어적인 특징"}}},{"node":{"fields":{"slug":"/Overview","title":"개요"}}},{"node":{"fields":{"slug":"/ReScript-React","title":"ReScript React"}}},{"node":{"fields":{"slug":"/","title":"ReScript in Korean"}}},{"node":{"fields":{"slug":"/Build-System/01-Overview","title":"Build System Overview"}}},{"node":{"fields":{"slug":"/Build-System/02-Configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/Build-System/03-Configuration-Schema","title":"Configuration Schema"}}},{"node":{"fields":{"slug":"/Build-System/04-Interop-with-JS-Build-Systems","title":"Interop with JS Build Systems"}}},{"node":{"fields":{"slug":"/Build-System/05-Performance","title":"Performance"}}},{"node":{"fields":{"slug":"/Extra/01-Newcomer-Examples","title":"초보자를 위한 예제"}}},{"node":{"fields":{"slug":"/Extra/02-Project-Structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/Extra/03-FAQ","title":"자주 묻는 질문"}}},{"node":{"fields":{"slug":"/Guides/01-Converting-from-JS","title":"자바스크립트 파일을 변환하기"}}},{"node":{"fields":{"slug":"/Guides/02-Libraries","title":"Libraries"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/04-Bind-to-JS-Object","title":"자바스크립트 객체에 바인딩하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/05-Bind-to-JS-Function","title":"Bind to JS Function"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/06-Import-from-Export-to-JS","title":"Import from / Export to JS"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","title":"Bind to Global JS Values"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/08-JSON","title":"JSON"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/09-Inlining-Constants","title":"Inlining Constants"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/10-Use-Illegal-Identifier-Names","title":"Use Illegal Identifier Names"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers","title":"인터롭 코드 자동 생성하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/12-Browser-Support-Polyfills","title":"Browser Support & Polyfills"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/13-Interop-Cheatsheet","title":"Interop Cheatsheet"}}},{"node":{"fields":{"slug":"/Language-Features/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Language-Features/02-Let-Binding","title":"Let Binding"}}},{"node":{"fields":{"slug":"/Language-Features/03-Type","title":"타입"}}},{"node":{"fields":{"slug":"/Language-Features/04-Primitive-Types","title":"원시 타입"}}},{"node":{"fields":{"slug":"/Language-Features/05-Tuple","title":"튜플"}}},{"node":{"fields":{"slug":"/Language-Features/06-Record","title":"레코드"}}},{"node":{"fields":{"slug":"/Language-Features/07-Object","title":"객체"}}},{"node":{"fields":{"slug":"/Language-Features/08-Variant","title":"배리언트"}}},{"node":{"fields":{"slug":"/Language-Features/09-Polymorphic-Variant","title":"Polymorphic Variant"}}},{"node":{"fields":{"slug":"/Language-Features/10-Null-Undefined-and-Option","title":"Null, Undefined 그리고 Option"}}},{"node":{"fields":{"slug":"/Language-Features/11-Array-List","title":"배열과 리스트"}}},{"node":{"fields":{"slug":"/Language-Features/12-Function","title":"함수"}}},{"node":{"fields":{"slug":"/Language-Features/13-Control-Flow","title":"제어 흐름"}}},{"node":{"fields":{"slug":"/Language-Features/14-Pipe","title":"파이프"}}},{"node":{"fields":{"slug":"/Language-Features/15-Pattern-Matching-Destructuring","title":"패턴 매칭 / 구조분해"}}},{"node":{"fields":{"slug":"/Language-Features/16-Mutation","title":"가변"}}},{"node":{"fields":{"slug":"/Language-Features/17-JSX","title":"JSX"}}},{"node":{"fields":{"slug":"/Language-Features/18-Exception","title":"예외"}}},{"node":{"fields":{"slug":"/Language-Features/19-Lazy-Value","title":"Lazy Value"}}},{"node":{"fields":{"slug":"/Language-Features/20-Async-Promise","title":"Async & Promise"}}},{"node":{"fields":{"slug":"/Language-Features/21-Module","title":"모듈"}}},{"node":{"fields":{"slug":"/Language-Features/22-Import-Export","title":"Import & Export"}}},{"node":{"fields":{"slug":"/Language-Features/23-Attribute-Decorator","title":"속성 (데코레이터)"}}},{"node":{"fields":{"slug":"/Language-Features/24-Unboxed","title":"언박싱"}}},{"node":{"fields":{"slug":"/Language-Features/25-Reserved-Keyword","title":"예약된 키워드"}}},{"node":{"fields":{"slug":"/Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/03-EditorPlugins","title":"편집기 플러그인"}}},{"node":{"fields":{"slug":"/Overview/04-Migrate-to-ReScript-Syntax","title":"리스크립트 문법으로 변경하기"}}},{"node":{"fields":{"slug":"/Overview/05-Try","title":"CLI로 직접 해보기"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts","title":"메인 컨셉"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management","title":"리액트 훅과 상태 관리"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/01-@deriving(accessors)","title":"@deriving(accessor)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/02-@deriving(jsConverter)","title":"@deriving(jsConverter)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/03-@deriving(abstract)","title":"@deriving(abstract)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/04-@obj","title":"@obj"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/01-Elements-and-JSX","title":"엘레멘트와 JSX"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","title":"External (자바스크립트 라이브러리 바인딩)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/02-Shared-Data-Types","title":"데이터 타입 공유"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/01-Embed-Raw-JavaScript","title":"Embed Raw JavaScript"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/02-Rendering-Elements","title":"엘레멘트 렌더링하기"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/03-Components-and-Props","title":"컴포넌트와 Props"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/04-Arrays-and-Keys","title":"배열과 키"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/05-Refs-and-the-DOM","title":"Refs와 DOM"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/06-Context","title":"컨텍스트"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/01-Hooks-and-State-Management-Overview","title":"리액트 훅과 상태 관리 개요"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/02-useEffect","title":"useEffect"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/03-useState","title":"useState"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/04-useReducer","title":"useReducer"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/05-useContext","title":"useContext"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/06-useRef","title":"useRef"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/07-Build-A-Custom-Hook","title":"커스텀 훅 만들기"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/01-Beyond-JSX","title":"JSX를 넘어서"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/02-Forwarding-Refs","title":"Ref 포워딩하기"}}}]}},"pageContext":{"id":"e231deef-0e57-5b52-a6a8-180c8d640db4"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}