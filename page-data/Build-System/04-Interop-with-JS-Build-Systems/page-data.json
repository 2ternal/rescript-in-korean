{"componentChunkName":"component---src-templates-docs-js","path":"/Build-System/04-Interop-with-JS-Build-Systems","result":{"data":{"site":{"siteMetadata":{"title":"ReScript in Korean","docsLocation":"https://github.com/green-labs/rescript-in-korean/tree/main/content"}},"mdx":{"fields":{"id":"d102d2b8-c827-5b72-a799-34a505126dbe","title":"Interop with JS Build Systems","slug":"/Build-System/04-Interop-with-JS-Build-Systems"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Interop with JS Build Systems\",\n  \"metaTitle\": \"Interop with JS Build Systems\",\n  \"metaDescription\": \"Documentation on how to interact with existing JS build systems\",\n  \"sourceUrl\": \"https://rescript-lang.org/docs/manual/latest/interop-with-js-build-systems\",\n  \"canonical\": \"https://rescript-lang.org/docs/manual/latest/interop-with-js-build-systems\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you come from JS, chances are that you already have a build system in your existing project. Here's an overview of the role bsb would play in your build pipeline, if you want to introduce some ReScript code into the codebase.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"As much as possible, please try not to wrap bsb into your own incremental build framework. ReScript's compilation is very hard to get right, and you'll inevitably run into stale or badly performing builds (therefore erasing much of our value proposition) if you create your own meta layer on top.\")), mdx(\"h2\", null, \"Popular JS Build Systems\"), mdx(\"p\", null, \"The JS ecosystem uses a few build systems: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://browserify.org/\"\n  }), \"browserify\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/rollup/rollup\"\n  }), \"rollup\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://webpack.js.org/\"\n  }), \"webpack\"), \", etc. The latter's probably the most popular of the three (as of 2019 =P). These build systems do both the compilation and the linking (aka, bundling many files into one or few files).\"), mdx(\"p\", null, \"ReScript and bsb only take care of the compilation step; it maps one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".res\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".resi\"), \" file into one JS output file. As such, in theory, no build system integration is needed from our side. From e.g. the webpack watcher's perspective, the JS files ReScript generates are almost equivalent to your hand-written JS files. We also recommend that you initially check in those ReScript-generated JS files, as this workflow means:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can introduce ReScript silently into your codebase without disturbing existing infra.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You have a \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"visual\"), \" diff of the performance & correctness of your JS file when you update the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".res\"), \" files and the JS artifacts change.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can let teammates hot-patch the JS files in emergency situations, without needing to first start learning ReScript.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can remove ReScript completely from your codebase and things will still work (in case your company decides to stop using us for whatever reason).\")), mdx(\"p\", null, \"For what it's worth, you can also turn bsb into an automated step in your build pipeline, e.g. into a webpack loader; but such approach is error-prone and therefore discouraged.\"), mdx(\"h3\", null, \"Tips & Tricks\"), mdx(\"p\", null, \"You can make ReScript JS files look even more idiomatic through the in-source + bs suffix config in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsconfig.json\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"package-specs\\\": {\\n    \\\"module\\\": \\\"commonjs\\\", // or whatever module system your project uses\\n    \\\"in-source\\\": true\\n  },\\n  \\\"suffix\\\": \\\".bs.js\\\"\\n}\\n\")), mdx(\"p\", null, \"This will:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Generate the JS files alongside your ReScript source files.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use the file extension \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".bs.js\"), \", so that you can require these files on the JS side through \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"require('./MyFile.bs')\"), \", without needing a loader.\")), mdx(\"h2\", null, \"Use Loaders on ReScript Side\"), mdx(\"p\", null, \"\\\"What if my build system uses a CSS/png/whatever loader and I'd like to use it in ReScript?\\\"\"), mdx(\"p\", null, \"Loaders are indeed troublesome; in the meantime, please use e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"%raw(\"), \"require('./myStyles.css')\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \")\"), \" at the top of your file. This just uses \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"embed-raw-javascript.md\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"raw\")), \" to compile the snippet into an actual JS require.\"), mdx(\"h2\", null, \"Getting Project's Dependencies\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsb\"), \" generates one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyFile.mlast.d\"), \" file per \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyFile\"), \" source file; you'll find them in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lib/bs\"), \". These are human readable, machine-friendly list of the dependencies of said \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyFile\"), \". You can read into them for your purpose (though mind the IO overhead). Use these files instead of creating your own dependency graph; we did the hard work of tracking the dependencies as best as possible (including inner modules, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"open\"), \"s, module names overlap, etc).\"), mdx(\"h2\", null, \"Run Script Per File Built\"), mdx(\"p\", null, \"See \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"build-configuration#js-post-build\"\n  }), \"js-post-build\"), \". Though please use it sparingly; if you hook up a node.js script after each file built, you'll incur the node startup time per file!\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#popular-js-build-systems","title":"Popular JS Build Systems","items":[{"url":"#tips--tricks","title":"Tips & Tricks"}]},{"url":"#use-loaders-on-rescript-side","title":"Use Loaders on ReScript Side"},{"url":"#getting-projects-dependencies","title":"Getting Project's Dependencies"},{"url":"#run-script-per-file-built","title":"Run Script Per File Built"}]},"parent":{"__typename":"File","relativePath":"Build-System/04-Interop-with-JS-Build-Systems.mdx"},"frontmatter":{"metaTitle":"Interop with JS Build Systems","metaDescription":"Documentation on how to interact with existing JS build systems","sourceUrl":"https://rescript-lang.org/docs/manual/latest/interop-with-js-build-systems","canonical":"https://rescript-lang.org/docs/manual/latest/interop-with-js-build-systems"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Build-System","title":"Build System"}}},{"node":{"fields":{"slug":"/Extra","title":"Extra"}}},{"node":{"fields":{"slug":"/Guides","title":"Guides"}}},{"node":{"fields":{"slug":"/JavaScript-Interop","title":"JavaScript Interop"}}},{"node":{"fields":{"slug":"/Language-Features","title":"Language Features"}}},{"node":{"fields":{"slug":"/Overview","title":"Overview"}}},{"node":{"fields":{"slug":"/","title":"ReScript in Korean"}}},{"node":{"fields":{"slug":"/Build-System/01-Overview","title":"Build System Overview"}}},{"node":{"fields":{"slug":"/Build-System/02-Configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/Build-System/03-Configuration-Schema","title":"Configuration Schema"}}},{"node":{"fields":{"slug":"/Build-System/04-Interop-with-JS-Build-Systems","title":"Interop with JS Build Systems"}}},{"node":{"fields":{"slug":"/Build-System/05-Performance","title":"Performance"}}},{"node":{"fields":{"slug":"/Extra/01-Newcomer-Examples","title":"초보자를 위한 예제"}}},{"node":{"fields":{"slug":"/Extra/02-Project-Structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/Extra/03-FAQ","title":"자주 묻는 질문"}}},{"node":{"fields":{"slug":"/Guides/01-Converting-from-JS","title":"자바스크립트 파일을 변환하기"}}},{"node":{"fields":{"slug":"/Guides/02-Libraries","title":"Libraries"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/01-Embed-Raw-JavaScript","title":"Embed Raw JavaScript"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/02-Shared-Data-Types","title":"Shared Data Types"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","title":"External (Bind to Any JS Library)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/04-Bind-to-JS-Object","title":"자바스크립트 객체에 바인딩하기."}}},{"node":{"fields":{"slug":"/JavaScript-Interop/05-Bind-to-JS-Function","title":"Bind to JS Function"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/06-Import-from-Export-to-JS","title":"Import from / Export to JS"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","title":"Bind to Global JS Values"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/08-JSON","title":"JSON"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/09-Inlining-Constants","title":"Inlining Constants"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/10-Use-Illegal-Identifier-Names","title":"Use Illegal Identifier Names"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers","title":"Generate Converters & Helpers"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/12-Browser-Support-Polyfills","title":"Browser Support & Polyfills"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/13-Interop-Cheatsheet","title":"Interop Cheatsheet"}}},{"node":{"fields":{"slug":"/Language-Features/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Language-Features/02-Let-Binding","title":"Let Binding"}}},{"node":{"fields":{"slug":"/Language-Features/03-Type","title":"타입"}}},{"node":{"fields":{"slug":"/Language-Features/04-Primitive-Types","title":"원시 타입"}}},{"node":{"fields":{"slug":"/Language-Features/05-Tuple","title":"튜플"}}},{"node":{"fields":{"slug":"/Language-Features/06-Record","title":"레코드"}}},{"node":{"fields":{"slug":"/Language-Features/07-Object","title":"객체"}}},{"node":{"fields":{"slug":"/Language-Features/08-Variant","title":"배리언트"}}},{"node":{"fields":{"slug":"/Language-Features/09-Polymorphic-Variant","title":"Polymorphic Variant"}}},{"node":{"fields":{"slug":"/Language-Features/10-Null-Undefined-and-Option","title":"Null, Undefined 그리고 Option"}}},{"node":{"fields":{"slug":"/Language-Features/11-Array-List","title":"배열과 리스트"}}},{"node":{"fields":{"slug":"/Language-Features/12-Function","title":"함수"}}},{"node":{"fields":{"slug":"/Language-Features/13-Control-Flow","title":"제어 흐름"}}},{"node":{"fields":{"slug":"/Language-Features/14-Pipe","title":"파이프"}}},{"node":{"fields":{"slug":"/Language-Features/15-Pattern-Matching-Destructuring","title":"패턴 매칭 / 구조분해"}}},{"node":{"fields":{"slug":"/Language-Features/16-Mutation","title":"가변"}}},{"node":{"fields":{"slug":"/Language-Features/17-JSX","title":"JSX"}}},{"node":{"fields":{"slug":"/Language-Features/18-Exception","title":"예외"}}},{"node":{"fields":{"slug":"/Language-Features/19-Lazy-Value","title":"Lazy Value"}}},{"node":{"fields":{"slug":"/Language-Features/20-Async-Promise","title":"Async & Promise"}}},{"node":{"fields":{"slug":"/Language-Features/21-Module","title":"모듈"}}},{"node":{"fields":{"slug":"/Language-Features/22-Import-Export","title":"Import & Export"}}},{"node":{"fields":{"slug":"/Language-Features/23-Attribute-Decorator","title":"속성 (데코레이터)"}}},{"node":{"fields":{"slug":"/Language-Features/24-Unboxed","title":"언박싱"}}},{"node":{"fields":{"slug":"/Language-Features/25-Reserved-Keyword","title":"예약된 키워드"}}},{"node":{"fields":{"slug":"/Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/03-EditorPlugins","title":"편집기 플러그인"}}},{"node":{"fields":{"slug":"/Overview/05-Try","title":"CLI로 직접 해보기"}}},{"node":{"fields":{"slug":"/Overview/04-Migrate-to-ReScript-Syntax","title":"리스크립트 문법으로 변경하기"}}}]}},"pageContext":{"id":"d102d2b8-c827-5b72-a799-34a505126dbe"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}