{"componentChunkName":"component---src-templates-docs-js","path":"/Build-System/05-Performance","result":{"data":{"site":{"siteMetadata":{"title":"ReScript in Korean","docsLocation":"https://github.com/green-labs/rescript-in-korean/tree/main/content"}},"mdx":{"fields":{"id":"3e6dfe24-4f79-5970-8cda-c5df4c5f5fab","title":"Performance","slug":"/Build-System/05-Performance"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Performance\",\n  \"metaTitle\": \"Build Performance\",\n  \"metaDescription\": \"ReScript build performance and measuring tools\",\n  \"sourceUrl\": \"https://rescript-lang.org/docs/manual/latest/build-performance\",\n  \"canonical\": \"https://rescript-lang.org/docs/manual/latest/build-performance\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Image = makeShortcode(\"Image\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"ReScript considers performance at install time, build time and run time as a serious feature. Here are some more info, and tips on keeping the build fast. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Feel free to skip this section\"), \" if you're just starting out.\"), mdx(\"h2\", null, \"Profile Your Build\"), mdx(\"p\", null, \"Sometime your build can be slow due to some confused infra setups. We provide an interactive visualization of your build's performance via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bstracing\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"./node_modules/.bin/bstracing\\n\")), mdx(\"p\", null, \"Run the above command at your ReScript project's root; it'll spit out a JSON file you can drag and drop into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chrome://tracing\"), \".\"), mdx(\"p\", null, \"// import Image from 'src/components/Image';\"), mdx(\"p\", null, \"// \", mdx(Image, {\n    withShadow: true,\n    src: \"/static/img/bstracing.png\",\n    caption: \"Screenshot of bstracing result\",\n    mdxType: \"Image\"\n  })), mdx(\"h2\", null, \"Under the Hood\"), mdx(\"p\", null, \"Bsb itself uses a build system under the hood, called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://ninja-build.org\"\n  }), \"Ninja\"), \". Ninja is like Make, but cross-platform, minimal, focuses in perf and destined to be more of a low-level building block than a full-blown build system. In this regard, Ninja's a great implementation detail for bsb.\"), mdx(\"p\", null, \"Bsb reads into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsconfig.json\"), \" and generates the Ninja build file in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lib/bs\"), \". The file contains the low-level \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsc\"), \"-related commands, namespacing rules, intermediate artifacts generation & others. It then runs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ninja\"), \" for the actual build.\"), mdx(\"h2\", null, \"The JS Wrapper\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsb\"), \" itself is a Node.js wrapper which takes care of some miscellaneous tasks, plus the watcher. The lower-level, watcher-less, true \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsb\"), \" is called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsb.exe\"), \". It can be located in the same directory as where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsb\"), \" is found:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"> bsb -where\\n/usr/local/lib/node_modules/bs-platform/lib\\n\")), mdx(\"p\", null, \"The path varies across systems.\"), mdx(\"p\", null, \"If you don't need the watcher, you can run said \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsb.exe\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/usr/local/lib/node_modules/bs-platform/lib/bsb.exe\"), \". This side-steps the node.js startup time, which can be big (in the order of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"100ms\"), \").\"), mdx(\"h2\", null, \"Numbers\"), mdx(\"p\", null, \"Raw \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsb.exe\"), \" build on a small project should be around \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"70ms\"), \". This doubles when you use the more common \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsb\"), \" wrapper which comes with a watcher, which is practically faster since you don't manually run the build at every change (though you should opt for the raw \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsb.exe\"), \" for programmatic usage, e.g. inserting bsb into your existing JS build pipeline).\"), mdx(\"p\", null, \"No-op build (when no file's changed) should be around \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"15ms\"), \". Incremental rebuild (described soon) of a single file in a project is around \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"70ms\"), \" too.\"), mdx(\"p\", null, \"Cleaning the artifacts should be instantaneous.\"), mdx(\"h3\", null, \"Extreme Test\"), mdx(\"p\", null, \"We've stress-tested bsb on a big project of 10,000 files (2 directories, 5000 files each, first 5000 no dependencies, last 5000 10 dependencies on files from the former directory) using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ocaml-omake/omake/blob/perf-test/performance/generate.ml\"\n  }), \"https://github.com/ocaml-omake/omake/blob/perf-test/performance/generate.ml\"), \", on Retina Macbook Pro Early 2015 (3.1 GHz Intel Core i7).\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No-op build of 10k files: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"800ms\"), \" (the minimum amount of time required to check the mtimes of 10k files).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clean build: <3 minutes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incremental build: depends on the number of the dependents of the file. No dependent means \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1s\"), \".\")), mdx(\"p\", null, \"Note that bsb is a file-based build system. We don't do in-memory build, even if that speeds up the build a lot. In-memory builds risk memory leaks, out-of-memory errors and others. The bsb watcher, on the other hand, can stay open for days.\"), mdx(\"h2\", null, \"Incrementality\"), mdx(\"p\", null, \"Bsb doesn't take whole seconds to run every time. The bulk of the build performance comes from incremental build, aka re-building a previously built project when a few files changed.\"), mdx(\"p\", null, \"In short, thanks to our bsc compiler and bsb build system's architecture, we're able to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"only build what's needed\"), \". E.g. if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyFile.res\"), \" isn't changed, then it's not recompiled. You can roughly emulate such incrementality in languages like JavaScript, but the degree of correctness is unfortunately low. For example, if you rename or move a JS file, then the watcher might get confused and not pick up the \\\"new\\\" file or fail to clean things up correctly, resulting in you needing to clean your build and restart anew, which defeats the purpose.\"), mdx(\"h2\", null, \"Speed Up Incremental Build\"), mdx(\"p\", null, \"ReScript uses the concept of interface files (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".resi\"), \") (or, equivalently, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"module.md#signatures\"\n  }), \"module signatures\"), \"). Exposing only what you need naturally speeds up incremental builds. E.g. if you change a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".res\"), \" file whose corresponding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".resi\"), \" file doesn't expose the changed part, then you've reduced the amount of dependent files you have to rebuild.\"), mdx(\"h2\", null, \"Programmatic Usage\"), mdx(\"p\", null, \"Unfortunately, JS build systems are usually the bottleneck for building a JS project nowadays. Having parts of the build blazingly fast doesn't matter much if the rest of the build takes seconds or literally minutes. Here are a few suggestions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Convert more files into ReScript =). Fewer files going through fewer parts of the JS pipeline helps a ton.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Careful with bringing in more dependencies: libraries, syntax transforms, build step loaders, etc. The bulk of these dragging down the editing & building experience might out-weight the API benefits they provide.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Wait for us to create our own super fast linker (aka bundler).\")), mdx(\"h2\", null, \"Hot Reloading\"), mdx(\"p\", null, \"Hot reloading refers to maintaining a dev server and listening to file changes in a way that allows the server to pipe some delta changes right into the currently running browser page. This provides a relatively fast iteration workflow while working in specific frameworks.\"), mdx(\"p\", null, \"However, hot reloading is fragile by nature, and counts on the occasional inconsistencies (bad state, bad eval, etc.) and the heavy devserver setup/config being less of a hassle than the benefits it provides. We err on the side of caution and stability in general, and decided not to provide a built-in hot reloading \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"yet\"), \". \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": you can still use the hot reloading facility provided by your JS build pipeline.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#profile-your-build","title":"Profile Your Build"},{"url":"#under-the-hood","title":"Under the Hood"},{"url":"#the-js-wrapper","title":"The JS Wrapper"},{"url":"#numbers","title":"Numbers","items":[{"url":"#extreme-test","title":"Extreme Test"}]},{"url":"#incrementality","title":"Incrementality"},{"url":"#speed-up-incremental-build","title":"Speed Up Incremental Build"},{"url":"#programmatic-usage","title":"Programmatic Usage"},{"url":"#hot-reloading","title":"Hot Reloading"}]},"parent":{"__typename":"File","relativePath":"Build-System/05-Performance.mdx"},"frontmatter":{"metaTitle":"Build Performance","metaDescription":"ReScript build performance and measuring tools","sourceUrl":"https://rescript-lang.org/docs/manual/latest/build-performance","canonical":"https://rescript-lang.org/docs/manual/latest/build-performance"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Build-System","title":"Build System"}}},{"node":{"fields":{"slug":"/Guides","title":"Guides"}}},{"node":{"fields":{"slug":"/Extra","title":"Extra"}}},{"node":{"fields":{"slug":"/JavaScript-Interop","title":"JavaScript Interop"}}},{"node":{"fields":{"slug":"/Language-Features","title":"Language Features"}}},{"node":{"fields":{"slug":"/Overview","title":"Overview"}}},{"node":{"fields":{"slug":"/","title":"ReScript in Korean"}}},{"node":{"fields":{"slug":"/Build-System/01-Overview","title":"Build System Overview"}}},{"node":{"fields":{"slug":"/Build-System/02-Configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/Build-System/03-Configuration-Schema","title":"Configuration Schema"}}},{"node":{"fields":{"slug":"/Build-System/04-Interop-with-JS-Build-Systems","title":"Interop with JS Build Systems"}}},{"node":{"fields":{"slug":"/Build-System/05-Performance","title":"Performance"}}},{"node":{"fields":{"slug":"/Extra/01-Newcomer-Examples","title":"초보자를 위한 예제"}}},{"node":{"fields":{"slug":"/Extra/02-Project-Structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/Extra/03-FAQ","title":"자주 묻는 질문"}}},{"node":{"fields":{"slug":"/Guides/01-Converting-from-JS","title":"자바스크립트 파일을 변환하기"}}},{"node":{"fields":{"slug":"/Guides/02-Libraries","title":"Libraries"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/01-Embed-Raw-JavaScript","title":"Embed Raw JavaScript"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/02-Shared-Data-Types","title":"Shared Data Types"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","title":"External (자바스크립트 라이브러리 바인딩)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/04-Bind-to-JS-Object","title":"자바스크립트 객체에 바인딩하기."}}},{"node":{"fields":{"slug":"/JavaScript-Interop/05-Bind-to-JS-Function","title":"Bind to JS Function"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/06-Import-from-Export-to-JS","title":"Import from / Export to JS"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","title":"Bind to Global JS Values"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/08-JSON","title":"JSON"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/09-Inlining-Constants","title":"Inlining Constants"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/10-Use-Illegal-Identifier-Names","title":"Use Illegal Identifier Names"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers","title":"Generate Converters & Helpers"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/12-Browser-Support-Polyfills","title":"Browser Support & Polyfills"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/13-Interop-Cheatsheet","title":"Interop Cheatsheet"}}},{"node":{"fields":{"slug":"/Language-Features/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Language-Features/02-Let-Binding","title":"Let Binding"}}},{"node":{"fields":{"slug":"/Language-Features/03-Type","title":"타입"}}},{"node":{"fields":{"slug":"/Language-Features/04-Primitive-Types","title":"원시 타입"}}},{"node":{"fields":{"slug":"/Language-Features/05-Tuple","title":"튜플"}}},{"node":{"fields":{"slug":"/Language-Features/06-Record","title":"레코드"}}},{"node":{"fields":{"slug":"/Language-Features/07-Object","title":"객체"}}},{"node":{"fields":{"slug":"/Language-Features/08-Variant","title":"배리언트"}}},{"node":{"fields":{"slug":"/Language-Features/09-Polymorphic-Variant","title":"Polymorphic Variant"}}},{"node":{"fields":{"slug":"/Language-Features/10-Null-Undefined-and-Option","title":"Null, Undefined 그리고 Option"}}},{"node":{"fields":{"slug":"/Language-Features/11-Array-List","title":"배열과 리스트"}}},{"node":{"fields":{"slug":"/Language-Features/12-Function","title":"함수"}}},{"node":{"fields":{"slug":"/Language-Features/13-Control-Flow","title":"제어 흐름"}}},{"node":{"fields":{"slug":"/Language-Features/14-Pipe","title":"파이프"}}},{"node":{"fields":{"slug":"/Language-Features/15-Pattern-Matching-Destructuring","title":"패턴 매칭 / 구조분해"}}},{"node":{"fields":{"slug":"/Language-Features/16-Mutation","title":"가변"}}},{"node":{"fields":{"slug":"/Language-Features/17-JSX","title":"JSX"}}},{"node":{"fields":{"slug":"/Language-Features/18-Exception","title":"예외"}}},{"node":{"fields":{"slug":"/Language-Features/19-Lazy-Value","title":"Lazy Value"}}},{"node":{"fields":{"slug":"/Language-Features/20-Async-Promise","title":"Async & Promise"}}},{"node":{"fields":{"slug":"/Language-Features/21-Module","title":"모듈"}}},{"node":{"fields":{"slug":"/Language-Features/22-Import-Export","title":"Import & Export"}}},{"node":{"fields":{"slug":"/Language-Features/23-Attribute-Decorator","title":"속성 (데코레이터)"}}},{"node":{"fields":{"slug":"/Language-Features/24-Unboxed","title":"언박싱"}}},{"node":{"fields":{"slug":"/Language-Features/25-Reserved-Keyword","title":"예약된 키워드"}}},{"node":{"fields":{"slug":"/Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/03-EditorPlugins","title":"편집기 플러그인"}}},{"node":{"fields":{"slug":"/Overview/04-Migrate-to-ReScript-Syntax","title":"리스크립트 문법으로 변경하기"}}},{"node":{"fields":{"slug":"/Overview/05-Try","title":"CLI로 직접 해보기"}}}]}},"pageContext":{"id":"3e6dfe24-4f79-5970-8cda-c5df4c5f5fab"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}