{"componentChunkName":"component---src-templates-docs-js","path":"/Build-System/02-Configuration","result":{"data":{"site":{"siteMetadata":{"title":"ReScript in Korean","docsLocation":"https://github.com/green-labs/rescript-in-korean/tree/main/content"}},"mdx":{"fields":{"id":"d7fe6643-477f-5610-9a4b-4f0a5dd0c376","title":"Configuration","slug":"/Build-System/02-Configuration"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Configuration\",\n  \"metaTitle\": \"Build System Configuration\",\n  \"metaDescription\": \"Details about the configuration of the ReScript build system (bsconfig.json)\",\n  \"sourceUrl\": \"https://rescript-lang.org/docs/manual/latest/build-configuration\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsconfig.json\"), \" is the single, mandatory build meta file needed for bsb.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The complete configuration schema is \", mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"./build-configuration-schema\"\n  }), \"here\")), \". We'll \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"non-exhaustively\"), \" highlight the important parts in prose below.\"), mdx(\"h2\", null, \"Tips & Tricks\"), mdx(\"p\", null, \"If you're using an editor like VSCode, put the following code as your first field in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsconfig.json\"), \" to get schema autocompletion!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"$schema\\\": \\\"https://raw.githubusercontent.com/rescript-lang/rescript-compiler/master/docs/docson/build-schema.json\\\"\\n\")), mdx(\"h2\", null, \"name, namespace\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" is the name of the library, used as its \\\"namespace\\\". You can activate namespacing through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"namespace\\\": true\"), \" in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsconfig.json\"), \". Namespacing is almost \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"mandatory\"), \"; we haven't turned it on by default yet to preserve backward-compatibility.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Explanation\"), \": by default, your files, once used as a third-party dependency, are available globally to the consumer. E.g. if you have an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Util.re\"), \" and the consumer also has a file of the same name, they will clash. Turning on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"namespace\"), \" avoids this by wrapping all your own project's files into an extra module layer; instead of a global \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Util\"), \" module, the consumer will see you as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyProject.Util\"), \". \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The namespacing affects your consumers, not yourself\"), \".\"), mdx(\"p\", null, \"Aka, in Bsb, \\\"namespace\\\" is just a fancy term for an auto-generated module that wraps all your project's files (efficiently and correctly, of course!) for third-party consumption.\"), mdx(\"p\", null, \"We don't do folder-level namespacing for your own project; all your own file names must be unique. This is a constraint that enables several features such as fast search and easier project reorganization.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsconfig.json\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" should be the same as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \", to avoid confusing corner-cases. However, this means that you can't use a camelCased names such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyProject\"), \", since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" and npm forbid you to do so (some file systems are case-insensitive). To have the namespace/module as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyProject\"), \", write \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"name\\\": \\\"my-project\\\"\"), \". Bsb will turn that into the camelCased name correctly.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note on custom namespacing\"), \": if for some reason, you need a namespace that is different from what your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" will produce, you can directly send a string to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"namespace\"), \" option. For example, if your package is a binding named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bs-some-thing\"), \", you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"namespace\\\": \\\"some-thing\\\"\"), \" to get \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SomeThing\"), \" namespace instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BsSomeThing\"), \".\"), mdx(\"h2\", null, \"sources\"), mdx(\"p\", null, \"Your source files need to be specified explicitly (we don't want to accidentally drill down into some unrelated directories). Examples:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"sources\\\": [\\\"src\\\", \\\"examples\\\"]\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"sources\\\": {\\n    \\\"dir\\\": \\\"src\\\",\\n    \\\"subdirs\\\": [\\\"page\\\"]\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"sources\\\": [\\n    \\\"examples\\\",\\n    {\\n      \\\"dir\\\": \\\"src\\\",\\n      \\\"subdirs\\\": true // recursively builds every subdirectory\\n    }\\n  ]\\n}\\n\")), mdx(\"p\", null, \"You can mark your directories as dev-only (for e.g. tests). These won't be built and exposed to third-parties, or even to other \\\"dev\\\" directories in the same project:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"sources\\\": {\\n    \\\"dir\\\": \\\"test\\\",\\n    \\\"type\\\": \\\"dev\\\"\\n  }\\n}\\n\")), mdx(\"h2\", null, \"bs-dependencies, bs-dev-dependencies\"), mdx(\"p\", null, \"List of ReScript dependencies. Just like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \"'s dependencies, they'll be searched in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_modules\"), \".\"), mdx(\"p\", null, \"Note that only sources marked with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"type\\\":\\\"dev\\\"\"), \" will be able to resolve modules from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bs-dev-dependencies\"), \".\"), mdx(\"h2\", null, \"reason, refmt (old)\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reason\"), \" config is enabled by default. To turn on JSX for \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reasonml.github.io/reason-react/\"\n  }), \"ReasonReact\"), \", specify:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"reason\\\": { \\\"react-jsx\\\": 3 },\\n  \\\"refmt\\\": 3\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"refmt\"), \" config \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"should be explicitly specified\"), \" as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3\"), \".\"), mdx(\"h2\", null, \"js-post-build\"), mdx(\"p\", null, \"Hook that's invoked every time a file is recompiled. Good for JS build system interop, but please use it \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sparingly\"), \". Calling your custom command for every recompiled file slows down your build and worsens the building experience for even third-party users of your lib.\"), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"js-post-build\\\": {\\n    \\\"cmd\\\": \\\"/path/to/node ../../postProcessTheFile.js\\\"\\n  }\\n}\\n\")), mdx(\"p\", null, \"Note that the path resolution for the command (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node\"), \" in this case) is done so:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/myCommand\"), \" is resolved into \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/myCommand\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"package/myCommand\"), \" is resolved into \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"node_modules/package/myCommand\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"./myCommand\"), \" is resolved into \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"myProjectRoot/myCommand\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"myCommand\"), \" is just called as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"myCommand\"), \", aka a globally available executable. But note that Bsb doesn't read into your shell's environment, so if you put e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"node\"), \", it won't find it unless you specify an absolute path. Alternatively, add \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"#!/usr/local/bin/node\"), \" to the top of your script to directly call it without prepending \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"node\"), \".\")), mdx(\"p\", null, \"The command itself is called from inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lib/bs\"), \".\"), mdx(\"h2\", null, \"package-specs\"), mdx(\"p\", null, \"Output to either CommonJS (the default) or ES6 modules. Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"package-specs\\\": {\\n    \\\"module\\\": \\\"commonjs\\\",\\n    \\\"in-source\\\": true\\n  }\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"module\\\": \\\"es6-global\\\"\"), \" resolves \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"node_modules\"), \" using relative paths. Good for development-time usage of ES6 in conjunction with browsers like Safari and Firefox that support ES6 modules today. \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"No more dev-time bundling\"), \"!\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"in-source\\\": true\"), \" generates output alongside source files. If you omit it, it'll generate the artifacts into \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"lib/js\"), \". The output directory is not configurable otherwise.\")), mdx(\"p\", null, \"This configuration only applies to you, when you develop the project. When the project is used as a third-party library, the consumer's own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsconfig.json\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package-specs\"), \" overrides the configuration here, logically.\"), mdx(\"h2\", null, \"suffix\"), mdx(\"p\", null, \"Either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\".js\\\"\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\".bs.js\\\"\"), \". Strongly prefer the latter.\"), mdx(\"h3\", null, \"Design Decisions\"), mdx(\"p\", null, \"Generating JS files with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bs.js\"), \" suffix means that, on the JS side, you can do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const myReScriptFile = require('./theFile.bs')\"), \". The benefits:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It's immediately clear that we're dealing with a generated JS file here.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It avoids clashes with a potential \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"theFile.js\"), \" file in the same folder.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It avoids the need of using a build system loader for ReScript files. This + in-source build means integrating a ReScript project into your pure JS codebase \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"basically doesn't touch anything in your build pipeline at all\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".bs.js\"), \" suffix \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"build-overview.md#tips-tricks\"\n  }), \"lets bsb track JS artifacts much better\"), \".\")), mdx(\"h2\", null, \"warnings\"), mdx(\"p\", null, \"Selectively turn on/off certain warnings and/or turn them into hard errors. Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"warnings\\\": {\\n    \\\"number\\\": \\\"-44-102\\\",\\n    \\\"error\\\": \\\"+5\\\"\\n  }\\n}\\n\")), mdx(\"p\", null, \"Turn off warning \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"44\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"102\"), \" (polymorphic comparison). Turn warning \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"5\"), \" (partial application whose result has function type and is ignored) into a hard error.\"), mdx(\"p\", null, \"The warning number are shown in the build output when they're triggered. The complete list is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://caml.inria.fr/pub/docs/manual-ocaml/comp.html#sec281\"\n  }), \"here\"), \", a little bit below. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"100\"), \" and up are ReScript-specific.\"), mdx(\"h2\", null, \"bsc-flags\"), mdx(\"p\", null, \"Extra flags to pass to the underlying \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsc\"), \" call. Notably: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[\\\"-bs-super-errors\\\"]\"), \" for turning on cleaner error output. No need to pass this flag for a new ReScript project; it's enabled by default.\"), mdx(\"h2\", null, \"Environment Variables\"), mdx(\"p\", null, \"We heavily disrecommend the usage of environment variables, but for certain cases, they're justified.\"), mdx(\"h3\", null, \"Error Output Coloring: NINJA_ANSI_FORCED\"), mdx(\"p\", null, \"This is mostly for other programmatic usage of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsb\"), \" where outputting colors is not desired.\"), mdx(\"p\", null, \"When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NINJA_ANSI_FORCED\"), \" is set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsb\"), \" produces color.\\nWhen \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NINJA_ANSI_FORCED\"), \" is set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsb\"), \" doesn't produce color.\\nWhen \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NINJA_ANSI_FORCED\"), \" is not set: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bsb\"), \" might or might not produce color, depending on a smart detection of where it's outputted.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note that bsc, the barebone compiler, will always be passed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-color always\"), \". See more details in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/rescript-lang/rescript-compiler/issues/2984#issuecomment-410669163\"\n  }), \"this issue\"), \".\")), mdx(\"h3\", null, \"BS_VSCODE error output adapted for VSCODE\"), mdx(\"p\", null, \"If you run bsb under VSCODE task runner like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/rescript-lang/rescript-compiler/blob/master/jscomp/bsb/templates/basic-reason/.vscode/tasks.json#L6\"\n  }), \"this\"), \", it is recommended to have BS_VSCODE set\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#tips--tricks","title":"Tips & Tricks"},{"url":"#name-namespace","title":"name, namespace"},{"url":"#sources","title":"sources"},{"url":"#bs-dependencies-bs-dev-dependencies","title":"bs-dependencies, bs-dev-dependencies"},{"url":"#reason-refmt-old","title":"reason, refmt (old)"},{"url":"#js-post-build","title":"js-post-build"},{"url":"#package-specs","title":"package-specs"},{"url":"#suffix","title":"suffix","items":[{"url":"#design-decisions","title":"Design Decisions"}]},{"url":"#warnings","title":"warnings"},{"url":"#bsc-flags","title":"bsc-flags"},{"url":"#environment-variables","title":"Environment Variables","items":[{"url":"#error-output-coloring-ninja_ansi_forced","title":"Error Output Coloring: NINJA_ANSI_FORCED"},{"url":"#bs_vscode-error-output-adapted-for-vscode","title":"BS_VSCODE error output adapted for VSCODE"}]}]},"parent":{"__typename":"File","relativePath":"Build-System/02-Configuration.mdx"},"frontmatter":{"metaTitle":"Build System Configuration","metaDescription":"Details about the configuration of the ReScript build system (bsconfig.json)","sourceUrl":"https://rescript-lang.org/docs/manual/latest/build-configuration"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Build-System","title":"Build System"}}},{"node":{"fields":{"slug":"/Extra","title":"Extra"}}},{"node":{"fields":{"slug":"/Guides","title":"Guides"}}},{"node":{"fields":{"slug":"/JavaScript-Interop","title":"JavaScript Interop"}}},{"node":{"fields":{"slug":"/Language-Features","title":"Language Features"}}},{"node":{"fields":{"slug":"/Overview","title":"Overview"}}},{"node":{"fields":{"slug":"/","title":"ReScript in Korean"}}},{"node":{"fields":{"slug":"/Build-System/01-Overview","title":"Build System Overview"}}},{"node":{"fields":{"slug":"/Build-System/02-Configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/Build-System/03-Configuration-Schema","title":"Configuration Schema"}}},{"node":{"fields":{"slug":"/Build-System/04-Interop-with-JS-Build-Systems","title":"Interop with JS Build Systems"}}},{"node":{"fields":{"slug":"/Build-System/05-Performance","title":"Performance"}}},{"node":{"fields":{"slug":"/Extra/01-Newcomer-Examples","title":"초보자를 위한 예제"}}},{"node":{"fields":{"slug":"/Extra/02-Project-Structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/Extra/03-FAQ","title":"자주 묻는 질문"}}},{"node":{"fields":{"slug":"/Guides/01-Converting-from-JS","title":"자바스크립트 파일을 변환하기"}}},{"node":{"fields":{"slug":"/Guides/02-Libraries","title":"Libraries"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/01-Embed-Raw-JavaScript","title":"Embed Raw JavaScript"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/02-Shared-Data-Types","title":"Shared Data Types"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","title":"External (Bind to Any JS Library)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/04-Bind-to-JS-Object","title":"자바스크립트 객체에 바인딩하기."}}},{"node":{"fields":{"slug":"/JavaScript-Interop/05-Bind-to-JS-Function","title":"Bind to JS Function"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/06-Import-from-Export-to-JS","title":"Import from / Export to JS"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","title":"Bind to Global JS Values"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/08-JSON","title":"JSON"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/09-Inlining-Constants","title":"Inlining Constants"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/10-Use-Illegal-Identifier-Names","title":"Use Illegal Identifier Names"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers","title":"Generate Converters & Helpers"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/12-Browser-Support-Polyfills","title":"Browser Support & Polyfills"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/13-Interop-Cheatsheet","title":"Interop Cheatsheet"}}},{"node":{"fields":{"slug":"/Language-Features/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Language-Features/02-Let-Binding","title":"Let Binding"}}},{"node":{"fields":{"slug":"/Language-Features/03-Type","title":"타입"}}},{"node":{"fields":{"slug":"/Language-Features/04-Primitive-Types","title":"원시 타입"}}},{"node":{"fields":{"slug":"/Language-Features/05-Tuple","title":"튜플"}}},{"node":{"fields":{"slug":"/Language-Features/06-Record","title":"레코드"}}},{"node":{"fields":{"slug":"/Language-Features/07-Object","title":"객체"}}},{"node":{"fields":{"slug":"/Language-Features/08-Variant","title":"배리언트"}}},{"node":{"fields":{"slug":"/Language-Features/09-Polymorphic-Variant","title":"Polymorphic Variant"}}},{"node":{"fields":{"slug":"/Language-Features/10-Null-Undefined-and-Option","title":"Null, Undefined 그리고 Option"}}},{"node":{"fields":{"slug":"/Language-Features/11-Array-List","title":"배열과 리스트"}}},{"node":{"fields":{"slug":"/Language-Features/12-Function","title":"함수"}}},{"node":{"fields":{"slug":"/Language-Features/13-Control-Flow","title":"제어 흐름"}}},{"node":{"fields":{"slug":"/Language-Features/14-Pipe","title":"파이프"}}},{"node":{"fields":{"slug":"/Language-Features/15-Pattern-Matching-Destructuring","title":"패턴 매칭 / 구조분해"}}},{"node":{"fields":{"slug":"/Language-Features/16-Mutation","title":"가변"}}},{"node":{"fields":{"slug":"/Language-Features/17-JSX","title":"JSX"}}},{"node":{"fields":{"slug":"/Language-Features/18-Exception","title":"예외"}}},{"node":{"fields":{"slug":"/Language-Features/19-Lazy-Value","title":"Lazy Value"}}},{"node":{"fields":{"slug":"/Language-Features/20-Async-Promise","title":"Async & Promise"}}},{"node":{"fields":{"slug":"/Language-Features/21-Module","title":"모듈"}}},{"node":{"fields":{"slug":"/Language-Features/22-Import-Export","title":"Import & Export"}}},{"node":{"fields":{"slug":"/Language-Features/23-Attribute-Decorator","title":"속성 (데코레이터)"}}},{"node":{"fields":{"slug":"/Language-Features/24-Unboxed","title":"언박싱"}}},{"node":{"fields":{"slug":"/Language-Features/25-Reserved-Keyword","title":"예약된 키워드"}}},{"node":{"fields":{"slug":"/Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/03-EditorPlugins","title":"편집기 플러그인"}}},{"node":{"fields":{"slug":"/Overview/04-Migrate-to-ReScript-Syntax","title":"리스크립트 문법으로 변경하기"}}},{"node":{"fields":{"slug":"/Overview/05-Try","title":"CLI로 직접 해보기"}}}]}},"pageContext":{"id":"d7fe6643-477f-5610-9a4b-4f0a5dd0c376"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}