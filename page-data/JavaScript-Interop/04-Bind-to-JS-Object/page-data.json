{"componentChunkName":"component---src-templates-docs-js","path":"/JavaScript-Interop/04-Bind-to-JS-Object","result":{"data":{"site":{"siteMetadata":{"title":"ReScript in Korean","docsLocation":"https://github.com/green-labs/rescript-in-korean/tree/main/content"}},"mdx":{"fields":{"id":"d95a41de-e599-5624-a093-705346aaf066","title":"Bind to JS Object","slug":"/JavaScript-Interop/04-Bind-to-JS-Object"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Bind to JS Object\",\n  \"metaTitle\": \"Bind to JS Object\",\n  \"metaDescription\": \"Interop with JS objects in ReScript\",\n  \"sourceUrl\": \"https://rescript-lang.org/docs/manual/latest/bind-to-js-object\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"JavaScript objects are a combination of several use-cases:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"As a \\\"record\\\" or \\\"struct\\\" in other languages (like ReScript and C).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"As a hash map.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"As a class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"As a module to import/export.\")), mdx(\"p\", null, \"ReScript cleanly separates the binding methods for JS object based on these 4 use-cases. This page documents the first three. Binding to JS module objects is described in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"import-from-export-to-js.md\"\n  }), \"Import from/Export to JS\"), \" section.\"), mdx(\"h2\", null, \"Bind to Record-like JS Objects\"), mdx(\"h3\", null, \"Bind Using ReScript Record\"), mdx(\"p\", null, \"If your JavaScript object has fixed fields, then it's conceptually like a ReScript record. Since a ReScript record compiles to a clean JavaScript object, you can definitely type a JS object as a ReScript record!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"type person = {\\n  name: string,\\n  friends: array<string>,\\n  age: int,\\n}\\n\\n@bs.module(\\\"MySchool\\\") external john: person = \\\"john\\\"\\n\\nlet johnName = john.name\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var MySchool = require('MySchool');\\n\\nvar johnName = MySchool.john.name;\\n\")), mdx(\"p\", null, \"External is documented \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"external.md\"\n  }), \"here\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@bs.module\"), \" is documented \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"import-from-export-to-js.md\"\n  }), \"here\"), \".\"), mdx(\"h3\", null, \"Bind Using ReScript Object\"), mdx(\"p\", null, \"Alternatively, you can use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"object.md\"\n  }), \"ReScript object\"), \" to model a JS object too:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"type person = {\\n  \\\"name\\\": string,\\n  \\\"friends\\\": array<string>,\\n  \\\"age\\\": int,\\n}\\n\\n@bs.module(\\\"MySchool\\\") external john: person = \\\"john\\\"\\n\\nlet johnName = john[\\\"name\\\"]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var MySchool = require('MySchool');\\n\\nvar johnName = MySchool.john.name;\\n\")), mdx(\"h3\", null, \"Bind Using Special @bs Getters & Setters\"), mdx(\"p\", null, \"Alternatively, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bs.get\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bs.set\"), \" to bind to individual fields of a JS object:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"type textarea\\n@bs.set external setName: (textarea, string) => unit = \\\"name\\\"\\n@bs.get external getName: textarea => string = \\\"name\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\")), mdx(\"p\", null, \"You can also use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bs.get_index\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bs.set_index\"), \" to access a dynamic property or an index:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"type t\\n@bs.new external create: int => t = \\\"Int32Array\\\"\\n@bs.get_index external get: (t, int) => int = \\\"\\\"\\n@bs.set_index external set: (t, int, int) => unit = \\\"\\\"\\n\\nlet i32arr = create(3)\\ni32arr->set(0, 42)\\nJs.log(i32arr->get(0))\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var i32arr = new Int32Array(3);\\ni32arr[0] = 42;\\nconsole.log(i32arr[0]);\\n\")), mdx(\"h2\", null, \"Bind to Hash Map-like JS Object\"), mdx(\"p\", null, \"If your JavaScript object:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"might or might not add/remove keys\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"contains only values that are of the same type\")), mdx(\"p\", null, \"Then it's not really an object, it's a hash map. Use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"api/js/dict\"\n  }), \"Js.Dict\"), \", which contains operations like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set\"), \", etc. and cleanly compiles to a JavaScript object still.\"), mdx(\"h2\", null, \"Bind to a JS Object That's a Class\"), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bs.new\"), \" to emulate e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new Date()\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"type t\\n@bs.new external createDate: unit => t = \\\"Date\\\"\\n\\nlet date = createDate()\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var date = new Date();\\n\")), mdx(\"p\", null, \"You can chain \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bs.new\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bs.module\"), \" if the JS module you're importing is itself a class:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"type t\\n@bs.new @bs.module external book: unit => t = \\\"Book\\\"\\nlet myBook = book()\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var Book = require('Book');\\nvar myBook = new Book();\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#bind-to-record-like-js-objects","title":"Bind to Record-like JS Objects","items":[{"url":"#bind-using-rescript-record","title":"Bind Using ReScript Record"},{"url":"#bind-using-rescript-object","title":"Bind Using ReScript Object"},{"url":"#bind-using-special-bs-getters--setters","title":"Bind Using Special @bs Getters & Setters"}]},{"url":"#bind-to-hash-map-like-js-object","title":"Bind to Hash Map-like JS Object"},{"url":"#bind-to-a-js-object-thats-a-class","title":"Bind to a JS Object That's a Class"}]},"parent":{"__typename":"File","relativePath":"JavaScript-Interop/04-Bind-to-JS-Object.mdx"},"frontmatter":{"metaTitle":"Bind to JS Object","metaDescription":"Interop with JS objects in ReScript","sourceUrl":"https://rescript-lang.org/docs/manual/latest/bind-to-js-object"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Build-System","title":"Build System"}}},{"node":{"fields":{"slug":"/Extra","title":"Extra"}}},{"node":{"fields":{"slug":"/Guides","title":"Guides"}}},{"node":{"fields":{"slug":"/JavaScript-Interop","title":"JavaScript Interop"}}},{"node":{"fields":{"slug":"/Language-Features","title":"Language Features"}}},{"node":{"fields":{"slug":"/Overview","title":"Overview"}}},{"node":{"fields":{"slug":"/","title":"ReScript in Korean"}}},{"node":{"fields":{"slug":"/Build-System/01-Overview","title":"Build System Overview"}}},{"node":{"fields":{"slug":"/Build-System/02-Configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/Build-System/03-Configuration-Schema","title":"Configuration Schema"}}},{"node":{"fields":{"slug":"/Build-System/04-Interop-with-JS-Build-Systems","title":"Interop with JS Build Systems"}}},{"node":{"fields":{"slug":"/Build-System/05-Performance","title":"Performance"}}},{"node":{"fields":{"slug":"/Extra/01-Newcomer-Examples","title":"초보자를 위한 예제"}}},{"node":{"fields":{"slug":"/Extra/02-Project-Structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/Extra/03-FAQ","title":"자주 묻는 질문"}}},{"node":{"fields":{"slug":"/Guides/01-Converting-from-JS","title":"자바스크립트 파일을 변환하기"}}},{"node":{"fields":{"slug":"/Guides/02-Libraries","title":"Libraries"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/01-Embed-Raw-JavaScript","title":"Embed Raw JavaScript"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/02-Shared-Data-Types","title":"Shared Data Types"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","title":"External (Bind to Any JS Library)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/04-Bind-to-JS-Object","title":"Bind to JS Object"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/05-Bind-to-JS-Function","title":"Bind to JS Function"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/06-Import-from-Export-to-JS","title":"Import from / Export to JS"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","title":"Bind to Global JS Values"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/08-JSON","title":"JSON"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/09-Inlining-Constants","title":"Inlining Constants"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/10-Use-Illegal-Identifier-Names","title":"Use Illegal Identifier Names"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers","title":"Generate Converters & Helpers"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/12-Browser-Support-Polyfills","title":"Browser Support & Polyfills"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/13-Interop-Cheatsheet","title":"Interop Cheatsheet"}}},{"node":{"fields":{"slug":"/Language-Features/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Language-Features/02-Let-Binding","title":"Let Binding"}}},{"node":{"fields":{"slug":"/Language-Features/03-Type","title":"타입"}}},{"node":{"fields":{"slug":"/Language-Features/04-Primitive-Types","title":"원시 타입"}}},{"node":{"fields":{"slug":"/Language-Features/05-Tuple","title":"튜플"}}},{"node":{"fields":{"slug":"/Language-Features/06-Record","title":"레코드"}}},{"node":{"fields":{"slug":"/Language-Features/07-Object","title":"객체"}}},{"node":{"fields":{"slug":"/Language-Features/08-Variant","title":"배리언트"}}},{"node":{"fields":{"slug":"/Language-Features/09-Polymorphic-Variant","title":"Polymorphic Variant"}}},{"node":{"fields":{"slug":"/Language-Features/10-Null-Undefined-and-Option","title":"Null, Undefined 그리고 Option"}}},{"node":{"fields":{"slug":"/Language-Features/11-Array-List","title":"배열과 리스트"}}},{"node":{"fields":{"slug":"/Language-Features/12-Function","title":"함수"}}},{"node":{"fields":{"slug":"/Language-Features/13-Control-Flow","title":"제어 흐름"}}},{"node":{"fields":{"slug":"/Language-Features/14-Pipe","title":"파이프"}}},{"node":{"fields":{"slug":"/Language-Features/15-Pattern-Matching-Destructuring","title":"패턴 매칭 / 구조분해"}}},{"node":{"fields":{"slug":"/Language-Features/16-Mutation","title":"가변"}}},{"node":{"fields":{"slug":"/Language-Features/17-JSX","title":"JSX"}}},{"node":{"fields":{"slug":"/Language-Features/18-Exception","title":"예외"}}},{"node":{"fields":{"slug":"/Language-Features/19-Lazy-Value","title":"Lazy Value"}}},{"node":{"fields":{"slug":"/Language-Features/20-Async-Promise","title":"Async & Promise"}}},{"node":{"fields":{"slug":"/Language-Features/21-Module","title":"모듈"}}},{"node":{"fields":{"slug":"/Language-Features/22-Import-Export","title":"Import & Export"}}},{"node":{"fields":{"slug":"/Language-Features/23-Attribute-Decorator","title":"속성 (데코레이터)"}}},{"node":{"fields":{"slug":"/Language-Features/24-Unboxed","title":"언박싱"}}},{"node":{"fields":{"slug":"/Language-Features/25-Reserved-Keyword","title":"예약된 키워드"}}},{"node":{"fields":{"slug":"/Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/03-EditorPlugins","title":"편집기 플러그인"}}},{"node":{"fields":{"slug":"/Overview/04-Migrate-to-ReScript-Syntax","title":"리스크립트 문법으로 변경하기"}}},{"node":{"fields":{"slug":"/Overview/05-Try","title":"CLI로 직접 해보기"}}}]}},"pageContext":{"id":"d95a41de-e599-5624-a093-705346aaf066"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}