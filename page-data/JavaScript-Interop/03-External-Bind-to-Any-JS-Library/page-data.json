{"componentChunkName":"component---src-templates-docs-js","path":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","result":{"data":{"site":{"siteMetadata":{"title":"ReScript in Korean","docsLocation":"https://github.com/green-labs/rescript-in-korean/tree/main/content"}},"mdx":{"fields":{"id":"89eca9b0-c0b6-5a85-98d8-7958d707def2","title":"External (Bind to Any JS Library)","slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"External (Bind to Any JS Library)\",\n  \"metaTitle\": \"External (Bind to Any JS Library)\",\n  \"metaDescription\": \"The external keyword\",\n  \"sourceUrl\": \"https://rescript-lang.org/docs/manual/latest/external\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"external\"), \" is the primary ReScript features for bringing in and using JavaScript values.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"external\"), \" is like a let binding, but:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The right side of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"=\"), \" isn't a value; it's the name of the JS value you're referring to.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The type for the binding is mandatory, since we need to know what the type of that JS value is.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can only exist at the top level of a file or module.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"@bs.val external setTimeout: (unit => unit, int) => float = \\\"setTimeout\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Empty output\\n\")), mdx(\"p\", null, \"There are several kinds of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"external\"), \"s, differentiated and/or augmented through the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@bs\"), \" notation they carry. This page deals with the general, shared mechanism behind most \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"external\"), \"s. The different \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@bs\"), \" annotations are documented in their respective pages later. A few notable ones:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@bs.val\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@bs.scope\"), \": \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"bind-to-global-js-values\"\n  }), \"bind to global JS values\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@bs.module\"), \": \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"import-from-export-to-js\"\n  }), \"bind to JS imported/exported values\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@bs.send\"), \": \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"bind-to-js-function\"\n  }), \"bind to JS methods\"), \".\")), mdx(\"h2\", null, \"Usage\"), mdx(\"p\", null, \"Once declared, you can use an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"external\"), \" as a normal value, just like a let binding.\"), mdx(\"h2\", null, \"Tips & Tricks\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"external\"), \" + ReScript objects are a wonderful combination for quick prototyping. Check the JS output tab:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"/* The type of document is just some random type 'a that we won't bother to specify */\\n@bs.val external document: 'a = \\\"document\\\"\\n\\n/* call a method */\\ndocument[\\\"addEventListener\\\"](\\\"mouseup\\\", _event => {\\n  Js.log(\\\"clicked!\\\")\\n})\\n\\n/* get a property */\\nlet loc = document[\\\"location\\\"]\\n\\n/* set a property */\\ndocument[\\\"location\\\"][\\\"href\\\"] = \\\"rescript-lang.org\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"document.addEventListener('mouseup', function(_event) {\\n  console.log('clicked!');\\n});\\n\\nvar loc = document.location;\\n\\ndocument.location.href = 'rescript-lang.org';\\n\")), mdx(\"p\", null, \"We've specified \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"document\"), \"'s type as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'a\"), \", aka a placeholder type that's polymorphic. Any value can be passed there, so you're not getting much type safety (except the inferences at various call sites). However, this is excellent for quickly getting started using a JavaScript library in ReScript \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"without needing the equivalent of a repository of typed bindings\"), \" like TypeScript's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DefinitelyTyped\"), \" repo.\"), mdx(\"p\", null, \"However, if you want to more rigidly bind to the JavaScript library you want, keep reading the next few interop pages.\"), mdx(\"h2\", null, \"Performance & Output Readability\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"external\"), \"s declarations are inlined into their callers during compilation, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"and completely disappear from the JS output\"), \". This means any time you use one, you can be sure that you're not incurring extra JavaScript <-> ReScript conversion cost.\"), mdx(\"p\", null, \"Additionally, no extra ReScript-specific runtime is better for output readability.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" do also use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"external\"), \"s and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@bs.blabla\"), \" attributes in the interface files. Otherwise the inlining won't happen.\")), mdx(\"h2\", null, \"Design Decisions\"), mdx(\"p\", null, \"ReScript takes interoperating with existing code very seriously. Our type system has very strong guarantees. However, such strong feature also means that, without a great interop system, it'd be very hard to gradually convert a codebase over to ReScript. Fortunately, our interop are comprehensive and cooperate very well with most existing JavaScript code.\"), mdx(\"p\", null, \"The combination of a sound type system + great interop means that we get the benefits of a traditional gradual type system regarding incremental codebase coverage & conversion, without the downside of such gradual type system: complex features to support existing patterns, slow analysis, diminishing return in terms of type coverage, etc.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#usage","title":"Usage"},{"url":"#tips--tricks","title":"Tips & Tricks"},{"url":"#performance--output-readability","title":"Performance & Output Readability"},{"url":"#design-decisions","title":"Design Decisions"}]},"parent":{"__typename":"File","relativePath":"JavaScript-Interop/03-External-Bind-to-Any-JS-Library.mdx"},"frontmatter":{"metaTitle":"External (Bind to Any JS Library)","metaDescription":"The external keyword","sourceUrl":"https://rescript-lang.org/docs/manual/latest/external"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Build-System","title":"Build System"}}},{"node":{"fields":{"slug":"/Extra","title":"Extra"}}},{"node":{"fields":{"slug":"/Guides","title":"Guides"}}},{"node":{"fields":{"slug":"/JavaScript-Interop","title":"JavaScript Interop"}}},{"node":{"fields":{"slug":"/Language-Features","title":"Language Features"}}},{"node":{"fields":{"slug":"/Overview","title":"Overview"}}},{"node":{"fields":{"slug":"/","title":"ReScript in Korean"}}},{"node":{"fields":{"slug":"/Build-System/01-Overview","title":"Build System Overview"}}},{"node":{"fields":{"slug":"/Build-System/02-Configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/Build-System/03-Configuration-Schema","title":"Configuration Schema"}}},{"node":{"fields":{"slug":"/Build-System/04-Interop-with-JS-Build-Systems","title":"Interop with JS Build Systems"}}},{"node":{"fields":{"slug":"/Build-System/05-Performance","title":"Performance"}}},{"node":{"fields":{"slug":"/Extra/01-Newcomer-Examples","title":"초보자를 위한 예제"}}},{"node":{"fields":{"slug":"/Extra/02-Project-Structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/Extra/03-FAQ","title":"자주 묻는 질문"}}},{"node":{"fields":{"slug":"/Guides/01-Converting-from-JS","title":"자바스크립트 파일을 변환하기"}}},{"node":{"fields":{"slug":"/Guides/02-Libraries","title":"Libraries"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/01-Embed-Raw-JavaScript","title":"Embed Raw JavaScript"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/02-Shared-Data-Types","title":"Shared Data Types"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","title":"External (Bind to Any JS Library)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/04-Bind-to-JS-Object","title":"Bind to JS Object"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/05-Bind-to-JS-Function","title":"Bind to JS Function"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/06-Import-from-Export-to-JS","title":"Import from / Export to JS"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","title":"Bind to Global JS Values"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/08-JSON","title":"JSON"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/09-Inlining-Constants","title":"Inlining Constants"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/10-Use-Illegal-Identifier-Names","title":"Use Illegal Identifier Names"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers","title":"Generate Converters & Helpers"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/12-Browser-Support-Polyfills","title":"Browser Support & Polyfills"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/13-Interop-Cheatsheet","title":"Interop Cheatsheet"}}},{"node":{"fields":{"slug":"/Language-Features/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Language-Features/02-Let-Binding","title":"Let Binding"}}},{"node":{"fields":{"slug":"/Language-Features/03-Type","title":"타입"}}},{"node":{"fields":{"slug":"/Language-Features/04-Primitive-Types","title":"원시 타입"}}},{"node":{"fields":{"slug":"/Language-Features/05-Tuple","title":"튜플"}}},{"node":{"fields":{"slug":"/Language-Features/06-Record","title":"레코드"}}},{"node":{"fields":{"slug":"/Language-Features/07-Object","title":"객체"}}},{"node":{"fields":{"slug":"/Language-Features/08-Variant","title":"배리언트"}}},{"node":{"fields":{"slug":"/Language-Features/09-Polymorphic-Variant","title":"Polymorphic Variant"}}},{"node":{"fields":{"slug":"/Language-Features/10-Null-Undefined-and-Option","title":"Null, Undefined 그리고 Option"}}},{"node":{"fields":{"slug":"/Language-Features/11-Array-List","title":"배열과 리스트"}}},{"node":{"fields":{"slug":"/Language-Features/12-Function","title":"함수"}}},{"node":{"fields":{"slug":"/Language-Features/13-Control-Flow","title":"제어 흐름"}}},{"node":{"fields":{"slug":"/Language-Features/14-Pipe","title":"파이프"}}},{"node":{"fields":{"slug":"/Language-Features/15-Pattern-Matching-Destructuring","title":"패턴 매칭 / 구조분해"}}},{"node":{"fields":{"slug":"/Language-Features/16-Mutation","title":"가변"}}},{"node":{"fields":{"slug":"/Language-Features/17-JSX","title":"JSX"}}},{"node":{"fields":{"slug":"/Language-Features/18-Exception","title":"예외"}}},{"node":{"fields":{"slug":"/Language-Features/19-Lazy-Value","title":"Lazy Value"}}},{"node":{"fields":{"slug":"/Language-Features/20-Async-Promise","title":"Async & Promise"}}},{"node":{"fields":{"slug":"/Language-Features/21-Module","title":"모듈"}}},{"node":{"fields":{"slug":"/Language-Features/22-Import-Export","title":"Import & Export"}}},{"node":{"fields":{"slug":"/Language-Features/23-Attribute-Decorator","title":"속성 (데코레이터)"}}},{"node":{"fields":{"slug":"/Language-Features/24-Unboxed","title":"언박싱"}}},{"node":{"fields":{"slug":"/Language-Features/25-Reserved-Keyword","title":"예약된 키워드"}}},{"node":{"fields":{"slug":"/Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/03-EditorPlugins","title":"편집기 플러그인"}}},{"node":{"fields":{"slug":"/Overview/04-Migrate-to-ReScript-Syntax","title":"리스크립트 문법으로 변경하기"}}},{"node":{"fields":{"slug":"/Overview/05-Try","title":"CLI로 직접 해보기"}}}]}},"pageContext":{"id":"89eca9b0-c0b6-5a85-98d8-7958d707def2"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}