{"componentChunkName":"component---src-templates-docs-js","path":"/JavaScript-Interop/02-Shared-Data-Types","result":{"data":{"site":{"siteMetadata":{"title":"ReScript in Korean","docsLocation":"https://github.com/green-labs/rescript-in-korean/tree/main/content"}},"mdx":{"fields":{"id":"b8b18667-e912-5dac-ae53-c3161abc216c","title":"Shared Data Types","slug":"/JavaScript-Interop/02-Shared-Data-Types"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Shared Data Types\",\n  \"metaTitle\": \"Shared Data Types\",\n  \"metaDescription\": \"Data types that share runtime presentation between JS and ReScript\",\n  \"sourceUrl\": \"https://rescript-lang.org/docs/manual/latest/shared-data-types\",\n  \"canonical\": \"https://rescript-lang.org/docs/manual/latest/embed-raw-javascript\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"ReScript's built-in values of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"float\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"array\"), \" and a few others have a rather interesting property: they compile to the exact same value in JavaScript!\"), mdx(\"p\", null, \"This means that if you're passing e.g. a ReScript string to the JavaScript side, the JS side can directly use it as a native JS string. It also means that you can import a JS string and pretend it's a native ReScript string.\"), mdx(\"p\", null, \"Unlike most compiled-to-js languages, in ReScript, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"you don't need to write data converters back and forth for most of our values\"), \"!\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Shared, bidirectionally usable types\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"String. ReScript strings are JavaScript strings, vice-versa. (Caveat: only our backtick string \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"`hello \\uD83D\\uDC4B ${personName}`\"), \" supports unicode and interpolation).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Float. ReScript floats are JS numbers, vice-versa.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Array. In addition to the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"api/js/array\"\n  }), \"JS Array API\"), \", we provide our own \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"api/belt/array#set\"\n  }), \"Belt.Array\"), \" API too.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tuple. Compiles to a JS array. You can treat a fixed-sized, heterogenous JS array as ReScript tuple too.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Boolean.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Record. Record compiles to JS object. Therefore you can also treat JS objects as records. If they're too dynamic, consider modeling them on the ReScript side as a hashmap/dictionary \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"api/js/dict\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Js.Dict\")), \" or a ReScript object.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Object. ReScript objects are JavaScript objects, vice-versa.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unit. The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"unit\"), \" type, which has a single value \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"()\"), \", compiles to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"undefined\"), \" too. Likewise, you can treat an incoming JS \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"undefined\"), \" as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"()\"), \".\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Types that are slightly different than JS, but that you can still use from JS\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Int. \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Ints are 32-bits\"), \"! Be careful, you can potentially treat them as JS numbers and vice-versa, but if the number's large, then you better treat JS numbers as floats. For example, we bind to Js.Date using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"float\"), \"s.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Option. The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"option\"), \" type's \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"None\"), \" value compiles into JS \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"undefined\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Some\"), \" value, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Some(5)\"), \", compiles to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"5\"), \". Likewise, you can treat an incoming JS \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"undefined\"), \" as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"None\"), \". \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"JS \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"null\"), \" isn't handled here\"), \". If your JS value can be \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"null\"), \", use \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"api/js/nullable\"\n  }), \"Js.Nullable\"), \" helpers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Exception.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Variant. Check the compiled JavaScript output of variant to see its shape. We don't recommend exporting a ReScript variant for pure JS usage, but you can do that if you have some interop needs.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"List, which is just a regular variant.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Non-shared types (aka internal types)\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Character.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Int64.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lazy values.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Everything else.\")), mdx(\"p\", null, \"The non-shared types need your manual conversions if you want to export them for JS consumption. For a seamless JS / TypeScript / Flow integration experience, you might want to use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cristianoc/gentype\"\n  }), \"genType\"), \" instead of doing conversions by hand.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"parent":{"__typename":"File","relativePath":"JavaScript-Interop/02-Shared-Data-Types.mdx"},"frontmatter":{"metaTitle":"Shared Data Types","metaDescription":"Data types that share runtime presentation between JS and ReScript","sourceUrl":"https://rescript-lang.org/docs/manual/latest/shared-data-types","canonical":"https://rescript-lang.org/docs/manual/latest/embed-raw-javascript"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Build-System","title":"Build System"}}},{"node":{"fields":{"slug":"/Guides","title":"Guides"}}},{"node":{"fields":{"slug":"/Extra","title":"Extra"}}},{"node":{"fields":{"slug":"/JavaScript-Interop","title":"JavaScript Interop"}}},{"node":{"fields":{"slug":"/Language-Features","title":"Language Features"}}},{"node":{"fields":{"slug":"/Overview","title":"Overview"}}},{"node":{"fields":{"slug":"/","title":"ReScript in Korean"}}},{"node":{"fields":{"slug":"/Build-System/01-Overview","title":"Build System Overview"}}},{"node":{"fields":{"slug":"/Build-System/02-Configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/Build-System/03-Configuration-Schema","title":"Configuration Schema"}}},{"node":{"fields":{"slug":"/Build-System/04-Interop-with-JS-Build-Systems","title":"Interop with JS Build Systems"}}},{"node":{"fields":{"slug":"/Build-System/05-Performance","title":"Performance"}}},{"node":{"fields":{"slug":"/Extra/01-Newcomer-Examples","title":"초보자를 위한 예제"}}},{"node":{"fields":{"slug":"/Extra/02-Project-Structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/Extra/03-FAQ","title":"자주 묻는 질문"}}},{"node":{"fields":{"slug":"/Guides/01-Converting-from-JS","title":"자바스크립트 파일을 변환하기"}}},{"node":{"fields":{"slug":"/Guides/02-Libraries","title":"Libraries"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/01-Embed-Raw-JavaScript","title":"Embed Raw JavaScript"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/02-Shared-Data-Types","title":"Shared Data Types"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","title":"External (자바스크립트 라이브러리 바인딩)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/04-Bind-to-JS-Object","title":"자바스크립트 객체에 바인딩하기."}}},{"node":{"fields":{"slug":"/JavaScript-Interop/05-Bind-to-JS-Function","title":"Bind to JS Function"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/06-Import-from-Export-to-JS","title":"Import from / Export to JS"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","title":"Bind to Global JS Values"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/08-JSON","title":"JSON"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/09-Inlining-Constants","title":"Inlining Constants"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/10-Use-Illegal-Identifier-Names","title":"Use Illegal Identifier Names"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers","title":"Generate Converters & Helpers"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/12-Browser-Support-Polyfills","title":"Browser Support & Polyfills"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/13-Interop-Cheatsheet","title":"Interop Cheatsheet"}}},{"node":{"fields":{"slug":"/Language-Features/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Language-Features/02-Let-Binding","title":"Let Binding"}}},{"node":{"fields":{"slug":"/Language-Features/03-Type","title":"타입"}}},{"node":{"fields":{"slug":"/Language-Features/04-Primitive-Types","title":"원시 타입"}}},{"node":{"fields":{"slug":"/Language-Features/05-Tuple","title":"튜플"}}},{"node":{"fields":{"slug":"/Language-Features/06-Record","title":"레코드"}}},{"node":{"fields":{"slug":"/Language-Features/07-Object","title":"객체"}}},{"node":{"fields":{"slug":"/Language-Features/08-Variant","title":"배리언트"}}},{"node":{"fields":{"slug":"/Language-Features/09-Polymorphic-Variant","title":"Polymorphic Variant"}}},{"node":{"fields":{"slug":"/Language-Features/10-Null-Undefined-and-Option","title":"Null, Undefined 그리고 Option"}}},{"node":{"fields":{"slug":"/Language-Features/11-Array-List","title":"배열과 리스트"}}},{"node":{"fields":{"slug":"/Language-Features/12-Function","title":"함수"}}},{"node":{"fields":{"slug":"/Language-Features/13-Control-Flow","title":"제어 흐름"}}},{"node":{"fields":{"slug":"/Language-Features/14-Pipe","title":"파이프"}}},{"node":{"fields":{"slug":"/Language-Features/15-Pattern-Matching-Destructuring","title":"패턴 매칭 / 구조분해"}}},{"node":{"fields":{"slug":"/Language-Features/16-Mutation","title":"가변"}}},{"node":{"fields":{"slug":"/Language-Features/17-JSX","title":"JSX"}}},{"node":{"fields":{"slug":"/Language-Features/18-Exception","title":"예외"}}},{"node":{"fields":{"slug":"/Language-Features/19-Lazy-Value","title":"Lazy Value"}}},{"node":{"fields":{"slug":"/Language-Features/20-Async-Promise","title":"Async & Promise"}}},{"node":{"fields":{"slug":"/Language-Features/21-Module","title":"모듈"}}},{"node":{"fields":{"slug":"/Language-Features/22-Import-Export","title":"Import & Export"}}},{"node":{"fields":{"slug":"/Language-Features/23-Attribute-Decorator","title":"속성 (데코레이터)"}}},{"node":{"fields":{"slug":"/Language-Features/24-Unboxed","title":"언박싱"}}},{"node":{"fields":{"slug":"/Language-Features/25-Reserved-Keyword","title":"예약된 키워드"}}},{"node":{"fields":{"slug":"/Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/03-EditorPlugins","title":"편집기 플러그인"}}},{"node":{"fields":{"slug":"/Overview/04-Migrate-to-ReScript-Syntax","title":"리스크립트 문법으로 변경하기"}}},{"node":{"fields":{"slug":"/Overview/05-Try","title":"CLI로 직접 해보기"}}}]}},"pageContext":{"id":"b8b18667-e912-5dac-ae53-c3161abc216c"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}