{"componentChunkName":"component---src-templates-docs-js","path":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","result":{"data":{"site":{"siteMetadata":{"title":"ReScript in Korean","docsLocation":"https://github.com/green-labs/rescript-in-korean/tree/main/content"}},"mdx":{"fields":{"id":"9f983242-8907-50a9-807a-c6347e5be8b1","title":"Bind to Global JS Values","slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Bind to Global JS Values\",\n  \"metaTitle\": \"Bind to Global JS Values\",\n  \"metaDescription\": \"JS interop with global JS values in ReScript\",\n  \"sourceUrl\": \"https://rescript-lang.org/docs/manual/latest/bind-to-global-js-values\",\n  \"canonical\": \"https://rescript-lang.org/docs/manual/latest/bind-to-global-js-values\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"First\"), \", make sure the value you'd like to model doesn't already exist in our \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"api/js\"\n  }, \"provided API\"), \".\"), mdx(\"p\", null, \"Some JS values, like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeout\"), \", live in the global scope. You can bind to them like so:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"@bs.val external setTimeout: (unit => unit, int) => float = \\\"setTimeout\\\"\\n@bs.val external clearTimeout: float => unit = \\\"clearTimeout\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Empty output\\n\")), mdx(\"p\", null, \"(We already provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeout\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearTimeout\"), \" and others in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"api/js/global\"\n  }, \"Js.Global\"), \" module).\"), mdx(\"p\", null, \"This binds to the JavaScript \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrworkerGlobalScope/setTimeout\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"setTimeout\")), \" methods and the corresponding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearTimeout\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"external\"), \"'s type annotation specifies that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeout\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Takes a function that accepts \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"unit\"), \" and returns \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"unit\"), \" (which on the JS side turns into a function that accepts nothing and returns nothing aka \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"undefined\"), \"),\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"and an integer that specifies the duration before calling said function,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"returns a number that is the timeout's ID. This number might be big, so we're modeling it as a float rather than the 32-bit int.\")), mdx(\"h3\", null, \"\\uD301\\uACFC \\uD2B8\\uB9AD\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The above isn't ideal\"), \". See how \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeout\"), \" returns a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"float\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearTimeout\"), \" accepts one. There's no guarantee that you're passing the float created by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeout\"), \" into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearTimeout\"), \"! For all we know, someone might pass it \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Math.random()\"), \" into the latter.\"), mdx(\"p\", null, \"We're in a language with a great type system now! Let's leverage a popular feature to solve this problem: abstract types.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"type timerId\\n@bs.val external setTimeout: (unit => unit, int) => timerId = \\\"setTimeout\\\"\\n@bs.val external clearTimeout: timerId => unit = \\\"clearTimeout\\\"\\n\\nlet id = setTimeout(() => Js.log(\\\"hello\\\"), 100)\\nclearTimeout(id)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"var id = setTimeout(function(param) {\\n  console.log('hello');\\n}, 100);\\n\\nclearTimeout(id);\\n\")), mdx(\"p\", null, \"Clearly, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"timerId\"), \" is a type that can only be created by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeout\"), \"! Now we've guaranteed that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearTimeout\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"will\"), \" be passed a valid ID. Whether it's a number under the hood is now a mere implementation detail.\"), mdx(\"p\", null, \"Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"external\"), \"s are inlined, we end up with JS output as readable as hand-written JS.\"), mdx(\"h2\", null, \"Global Modules\"), mdx(\"p\", null, \"If you want to bind to a value inside a global module, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Math.random\"), \", attach a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bs.scope\"), \" to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bs.val\"), \" external:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"@bs.scope(\\\"Math\\\") @bs.val external random: unit => float = \\\"random\\\"\\nlet someNumber = random()\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"var someNumber = Math.random();\\n\")), mdx(\"p\", null, \"you can bind to an arbitrarily deep object by passing a tuple to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bs.scope\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"@bs.val @bs.scope((\\\"window\\\", \\\"location\\\", \\\"ancestorOrigins\\\"))\\nexternal length: int = \\\"length\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Empty output\\n\")), mdx(\"p\", null, \"This binds to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.location.ancestorOrigins.length\"), \".\"), mdx(\"h2\", null, \"Special Global Values\"), mdx(\"p\", null, \"Global values like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__filename\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__DEV__\"), \" don't always exist; you can't even model them as an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"option\"), \", since the mere act of referring to them in ReScript (then compiled into JS) would trigger the usual \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Uncaught ReferenceError: __filename is not defined\"), \" error in e.g. the browser environment.\"), mdx(\"p\", null, \"For these troublesome global values, ReScript provides a special approach: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"%external(a_single_identifier)\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"switch %external(__DEV__) {\\n| Some(_) => Js.log(\\\"dev mode\\\")\\n| None => Js.log(\\\"production mode\\\")\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"var match = typeof __DEV__ === 'undefined' ? undefined : __DEV__;\\n\\nif (match !== undefined) {\\n  console.log('dev mode');\\n} else {\\n  console.log('production mode');\\n}\\n\")), mdx(\"p\", null, \"That first line's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"typeof\"), \" check won't trigger a JS ReferenceError.\"), mdx(\"p\", null, \"\\uB2E4\\uB978 \\uC608\\uC81C\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-reason\"\n  }, \"switch %external(__filename) {\\n| Some(f) => Js.log(f)\\n| None => Js.log(\\\"non-node environment\\\")\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"var match = typeof __filename === 'undefined' ? undefined : __filename;\\n\\nif (match !== undefined) {\\n  console.log(match);\\n} else {\\n  console.log('non-node environment');\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#팁과-트릭","title":"팁과 트릭"}]},{"url":"#global-modules","title":"Global Modules"},{"url":"#special-global-values","title":"Special Global Values"}]},"parent":{"relativePath":"JavaScript-Interop/07-Bind-to-Global-JS-Values.mdx"},"frontmatter":{"metaTitle":"Bind to Global JS Values","metaDescription":"JS interop with global JS values in ReScript","sourceUrl":"https://rescript-lang.org/docs/manual/latest/bind-to-global-js-values","canonical":"https://rescript-lang.org/docs/manual/latest/bind-to-global-js-values"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Build-System","title":"빌드 시스템"}}},{"node":{"fields":{"slug":"/Extra","title":"그 외"}}},{"node":{"fields":{"slug":"/Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/JavaScript-Interop","title":"자바스크립트 인터롭"}}},{"node":{"fields":{"slug":"/Language-Features","title":"언어적인 특징"}}},{"node":{"fields":{"slug":"/Overview","title":"개요"}}},{"node":{"fields":{"slug":"/ReScript-React","title":"ReScript React"}}},{"node":{"fields":{"slug":"/","title":"ReScript in Korean"}}},{"node":{"fields":{"slug":"/Build-System/01-Overview","title":"Build System Overview"}}},{"node":{"fields":{"slug":"/Build-System/02-Configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/Build-System/03-Configuration-Schema","title":"Configuration Schema"}}},{"node":{"fields":{"slug":"/Build-System/04-Interop-with-JS-Build-Systems","title":"Interop with JS Build Systems"}}},{"node":{"fields":{"slug":"/Build-System/05-Performance","title":"Performance"}}},{"node":{"fields":{"slug":"/Extra/01-Newcomer-Examples","title":"초보자를 위한 예제"}}},{"node":{"fields":{"slug":"/Extra/02-Project-Structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/Extra/03-FAQ","title":"자주 묻는 질문"}}},{"node":{"fields":{"slug":"/Guides/01-Converting-from-JS","title":"자바스크립트 파일을 변환하기"}}},{"node":{"fields":{"slug":"/Guides/02-Libraries","title":"Libraries"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/01-Embed-Raw-JavaScript","title":"Embed Raw JavaScript"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/05-Bind-to-JS-Function","title":"자바스크립트 함수에 바인딩하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/06-Import-from-Export-to-JS","title":"Import from / Export to JS"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","title":"Bind to Global JS Values"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/08-JSON","title":"JSON"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/09-Inlining-Constants","title":"Inlining Constants"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/10-Use-Illegal-Identifier-Names","title":"Use Illegal Identifier Names"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers","title":"인터롭 코드 자동 생성하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/12-Browser-Support-Polyfills","title":"Browser Support & Polyfills"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/13-Interop-Cheatsheet","title":"Interop Cheatsheet"}}},{"node":{"fields":{"slug":"/Language-Features/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Language-Features/02-Let-Binding","title":"Let 바인딩"}}},{"node":{"fields":{"slug":"/Language-Features/03-Type","title":"타입"}}},{"node":{"fields":{"slug":"/Language-Features/04-Primitive-Types","title":"원시 타입"}}},{"node":{"fields":{"slug":"/Language-Features/05-Tuple","title":"튜플"}}},{"node":{"fields":{"slug":"/Language-Features/06-Record","title":"레코드"}}},{"node":{"fields":{"slug":"/Language-Features/07-Object","title":"객체"}}},{"node":{"fields":{"slug":"/Language-Features/08-Variant","title":"배리언트"}}},{"node":{"fields":{"slug":"/Language-Features/09-Polymorphic-Variant","title":"Polymorphic Variant"}}},{"node":{"fields":{"slug":"/Language-Features/10-Null-Undefined-and-Option","title":"Null, Undefined 그리고 Option"}}},{"node":{"fields":{"slug":"/Language-Features/11-Array-List","title":"배열과 리스트"}}},{"node":{"fields":{"slug":"/Language-Features/12-Function","title":"함수"}}},{"node":{"fields":{"slug":"/Language-Features/13-Control-Flow","title":"제어 흐름"}}},{"node":{"fields":{"slug":"/Language-Features/14-Pipe","title":"파이프"}}},{"node":{"fields":{"slug":"/Language-Features/15-Pattern-Matching-Destructuring","title":"패턴 매칭 / 구조분해"}}},{"node":{"fields":{"slug":"/Language-Features/16-Mutation","title":"가변"}}},{"node":{"fields":{"slug":"/Language-Features/17-JSX","title":"JSX"}}},{"node":{"fields":{"slug":"/Language-Features/18-Exception","title":"예외"}}},{"node":{"fields":{"slug":"/Language-Features/19-Lazy-Value","title":"Lazy Value"}}},{"node":{"fields":{"slug":"/Language-Features/20-Async-Promise","title":"Async & Promise"}}},{"node":{"fields":{"slug":"/Language-Features/21-Module","title":"모듈"}}},{"node":{"fields":{"slug":"/Language-Features/22-Import-Export","title":"Import & Export"}}},{"node":{"fields":{"slug":"/Language-Features/23-Attribute-Decorator","title":"속성 (데코레이터)"}}},{"node":{"fields":{"slug":"/Language-Features/24-Unboxed","title":"언박싱"}}},{"node":{"fields":{"slug":"/Language-Features/25-Reserved-Keyword","title":"예약된 키워드"}}},{"node":{"fields":{"slug":"/Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/03-EditorPlugins","title":"편집기 플러그인"}}},{"node":{"fields":{"slug":"/Overview/04-Migrate-to-ReScript-Syntax","title":"리스크립트 문법으로 변경하기"}}},{"node":{"fields":{"slug":"/Overview/05-Try","title":"CLI로 직접 해보기"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts","title":"메인 컨셉"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management","title":"리액트 훅과 상태 관리"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/04-Bind-to-JS-Object","title":"자바스크립트 객체에 바인딩하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","title":"External (자바스크립트 라이브러리 바인딩)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/02-Shared-Data-Types","title":"데이터 타입 공유"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/01-@deriving(accessors)","title":"@deriving(accessor)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/02-@deriving(jsConverter)","title":"@deriving(jsConverter)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/03-@deriving(abstract)","title":"@deriving(abstract)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/04-@obj","title":"@obj"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/01-Elements-and-JSX","title":"엘리먼트와 JSX"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/02-Rendering-Elements","title":"엘리먼트 렌더링하기"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/03-Components-and-Props","title":"컴포넌트와 Props"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/04-Arrays-and-Keys","title":"배열과 키"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/05-Refs-and-the-DOM","title":"Refs와 DOM"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/06-Context","title":"컨텍스트"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/01-Hooks-and-State-Management-Overview","title":"리액트 훅과 상태 관리 개요"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/02-useEffect","title":"useEffect"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/03-useState","title":"useState"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/04-useReducer","title":"useReducer"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/05-useContext","title":"useContext"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/06-useRef","title":"useRef"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/07-Build-A-Custom-Hook","title":"커스텀 훅 만들기"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/01-Beyond-JSX","title":"JSX를 넘어서"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/02-Forwarding-Refs","title":"Ref 포워딩하기"}}}]}},"pageContext":{"id":"9f983242-8907-50a9-807a-c6347e5be8b1"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}