{"componentChunkName":"component---src-templates-docs-js","path":"/JavaScript-Interop/06-Import-from-Export-to-JS","result":{"data":{"site":{"siteMetadata":{"title":"ReScript in Korean","docsLocation":"https://github.com/green-labs/rescript-in-korean/tree/main/content"}},"mdx":{"fields":{"id":"3a00f23e-03d0-5bc4-bc4b-971f8b557629","title":"Import from / Export to JS","slug":"/JavaScript-Interop/06-Import-from-Export-to-JS"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Import from / Export to JS\",\n  \"metaTitle\": \"Import from / Export to JS\",\n  \"metaDescription\": \"Importing / exporting JS module content in ReScript\",\n  \"sourceUrl\": \"https://rescript-lang.org/docs/manual/latest/import-from-export-to-js\",\n  \"canonical\": \"https://rescript-lang.org/docs/manual/latest/import-from-export-to-js\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You've seen how ReScript's idiomatic \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"import-export.md\"\n  }), \"Import & Export\"), \" works. This section describes how we work with importing stuff from JavaScript and exporting stuff for JavaScript consumption.\"), mdx(\"h2\", null, \"Import From JavaScript\"), mdx(\"h3\", null, \"Import a JavaScript Module's Content\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bs.module\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"external.md\"\n  }), \"external\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"/* Import nodejs' path.dirname */\\n@bs.module(\\\"path\\\") external dirname: string => string = \\\"dirname\\\"\\nlet root = dirname(\\\"/User/github\\\") // returns \\\"User\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var Path = require('path');\\nvar root = Path.dirname('/User/github');\\n\")), mdx(\"p\", null, \"Here's what the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"external\"), \" does:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@bs.module(\\\"path\\\")\"), \": pass the name of the JS module as a string; in this case, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"path\\\"\"), \". The string can be anything: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"./src/myJsFile\\\"\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"@myNpmNamespace/myLib\\\"\"), \", etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"external\"), \": the general keyword for declaring a value that exists on the JS side.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dirname\"), \": the binding name you'll use on the ReScript side.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"string => string\"), \": the type signature of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dirname\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"= \\\"dirname\\\"\"), \": the name of the variable inside the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"path\"), \" JS module. There's repetition in writing the first and second \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dirname\"), \", because sometime the binding name you want to use on the ReScript side is different than the variable name the JS module exported.\")), mdx(\"h3\", null, \"Import a JavaScript Module Itself (CommonJS)\"), mdx(\"p\", null, \"By omitting the string argument to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bs.module\"), \", you bind to the whole JS module:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"@bs.module external leftPad: string => int => string = \\\"./leftPad\\\"\\nlet paddedResult = leftPad(\\\"hi\\\", 5)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var LeftPad = require('./leftPad');\\nvar paddedResult = LeftPad('hi', 5);\\n\")), mdx(\"h3\", null, \"Import a JavaScript Module Itself (ES6 Module Format)\"), mdx(\"p\", null, \"If your JS project is using ES6, you're likely using Babel to compile it to regular JavaScript. Babel's ES6 default export actually exports the default value under the name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default\"), \". You'd bind to it like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"@bs.module(\\\"./student\\\") external studentName: string = \\\"default\\\"\\nJs.log(studentName)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var Student = require('./student');\\nconsole.log(Student.default);\\n\")), mdx(\"h2\", null, \"Export To JavaScript\"), mdx(\"p\", null, \"As mentioned in ReScript's idiomatic \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"import-export.md\"\n  }), \"Import & Export\"), \", every let binding and module is exported by default to other ReScript modules. If you open up the compiled JS file, you'll see that these values can also directly be used by another \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \" file too.\"), mdx(\"p\", null, \"We support 2 JS export formats:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CommonJS (usable from JS as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"require('myFile')\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ES6 modules (usable from JS as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"import * from 'myFile'\"), \").\")), mdx(\"p\", null, \"The output format is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"build-configuration.md#package-specs\"\n  }), \"configurable in bsb\"), \".\"), mdx(\"h3\", null, \"Export an ES6 default value\"), mdx(\"p\", null, \"If your JS project is using ES6 modules, you're likely exporting & importing some default values:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// student.js\\nexport default name = 'Al';\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// teacher.js\\nimport studentName from 'student.js';\\n\")), mdx(\"p\", null, \"Technically, since a ReScript file maps to a module, there's no such thing as \\\"default\\\" export, only named ones. However, we've made an exception to support default module when you do the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-reason\"\n  }), \"/* FavoriteStudent.res */\\nlet default = \\\"Bob\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var $$default = 'Bob';\\n\\nexports.$$default = $$default;\\nexports.default = $$default;\\nexports.__esModule = true;\\n\")), mdx(\"p\", null, \"You can then require the default as normal JS side:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// teacher2.js\\nimport studentName from 'FavoriteStudent.js';\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uCC38\\uACE0\"), \": the above JS snippet \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"only\"), \" works if you're using that ES6 import/export syntax in JS. If you're still using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"require\"), \", you'd need to do:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let studentName = require('FavoriteStudent').default;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#import-from-javascript","title":"Import From JavaScript","items":[{"url":"#import-a-javascript-modules-content","title":"Import a JavaScript Module's Content"},{"url":"#import-a-javascript-module-itself-commonjs","title":"Import a JavaScript Module Itself (CommonJS)"},{"url":"#import-a-javascript-module-itself-es6-module-format","title":"Import a JavaScript Module Itself (ES6 Module Format)"}]},{"url":"#export-to-javascript","title":"Export To JavaScript","items":[{"url":"#export-an-es6-default-value","title":"Export an ES6 default value"}]}]},"parent":{"__typename":"File","relativePath":"JavaScript-Interop/06-Import-from-Export-to-JS.mdx"},"frontmatter":{"metaTitle":"Import from / Export to JS","metaDescription":"Importing / exporting JS module content in ReScript","sourceUrl":"https://rescript-lang.org/docs/manual/latest/import-from-export-to-js","canonical":"https://rescript-lang.org/docs/manual/latest/import-from-export-to-js"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Extra","title":"그 외"}}},{"node":{"fields":{"slug":"/Build-System","title":"빌드 시스템"}}},{"node":{"fields":{"slug":"/Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/Language-Features","title":"언어적인 특징"}}},{"node":{"fields":{"slug":"/Overview","title":"개요"}}},{"node":{"fields":{"slug":"/JavaScript-Interop","title":"자바스크립트 인터롭"}}},{"node":{"fields":{"slug":"/ReScript-React","title":"ReScript React"}}},{"node":{"fields":{"slug":"/","title":"ReScript in Korean"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts","title":"메인 컨셉"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management","title":"리액트 훅과 상태 관리"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides","title":"가이드"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/02-Forwarding-Refs","title":"Ref 포워딩하기"}}},{"node":{"fields":{"slug":"/ReScript-React/04-Guides/01-Beyond-JSX","title":"JSX를 넘어서"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/02-useEffect","title":"useEffect"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/01-Hooks-and-State-Management-Overview","title":"리액트 훅과 상태 관리 개요"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/03-useState","title":"useState"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/04-useReducer","title":"useReducer"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/07-Build-A-Custom-Hook","title":"커스텀 훅 만들기"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/05-useContext","title":"useContext"}}},{"node":{"fields":{"slug":"/ReScript-React/03-Hooks-and-State-Management/06-useRef","title":"useRef"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/02-Rendering-Elements","title":"엘레멘트 렌더링하기"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/01-Elements-and-JSX","title":"엘레멘트와 JSX"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/03-Components-and-Props","title":"컴포넌트와 Props"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/06-Context","title":"컨텍스트"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/04-Arrays-and-Keys","title":"배열과 키"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/ReScript-React/02-Main-Concepts/05-Refs-and-the-DOM","title":"Refs와 DOM"}}},{"node":{"fields":{"slug":"/ReScript-React/01-Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/01-Introduction","title":"소개"}}},{"node":{"fields":{"slug":"/Overview/02-Installation","title":"설치"}}},{"node":{"fields":{"slug":"/Overview/04-Migrate-to-ReScript-Syntax","title":"리스크립트 문법으로 변경하기"}}},{"node":{"fields":{"slug":"/Language-Features/01-Overview","title":"개요"}}},{"node":{"fields":{"slug":"/Overview/03-EditorPlugins","title":"편집기 플러그인"}}},{"node":{"fields":{"slug":"/Overview/05-Try","title":"CLI로 직접 해보기"}}},{"node":{"fields":{"slug":"/Language-Features/02-Let-Binding","title":"Let Binding"}}},{"node":{"fields":{"slug":"/Language-Features/03-Type","title":"타입"}}},{"node":{"fields":{"slug":"/Language-Features/05-Tuple","title":"튜플"}}},{"node":{"fields":{"slug":"/Language-Features/04-Primitive-Types","title":"원시 타입"}}},{"node":{"fields":{"slug":"/Language-Features/06-Record","title":"레코드"}}},{"node":{"fields":{"slug":"/Language-Features/07-Object","title":"객체"}}},{"node":{"fields":{"slug":"/Language-Features/08-Variant","title":"배리언트"}}},{"node":{"fields":{"slug":"/Language-Features/10-Null-Undefined-and-Option","title":"Null, Undefined 그리고 Option"}}},{"node":{"fields":{"slug":"/Language-Features/11-Array-List","title":"배열과 리스트"}}},{"node":{"fields":{"slug":"/Language-Features/09-Polymorphic-Variant","title":"Polymorphic Variant"}}},{"node":{"fields":{"slug":"/Language-Features/14-Pipe","title":"파이프"}}},{"node":{"fields":{"slug":"/Language-Features/12-Function","title":"함수"}}},{"node":{"fields":{"slug":"/Language-Features/13-Control-Flow","title":"제어 흐름"}}},{"node":{"fields":{"slug":"/Language-Features/16-Mutation","title":"가변"}}},{"node":{"fields":{"slug":"/Language-Features/15-Pattern-Matching-Destructuring","title":"패턴 매칭 / 구조분해"}}},{"node":{"fields":{"slug":"/Language-Features/17-JSX","title":"JSX"}}},{"node":{"fields":{"slug":"/Language-Features/18-Exception","title":"예외"}}},{"node":{"fields":{"slug":"/Language-Features/19-Lazy-Value","title":"Lazy Value"}}},{"node":{"fields":{"slug":"/Language-Features/21-Module","title":"모듈"}}},{"node":{"fields":{"slug":"/Language-Features/22-Import-Export","title":"Import & Export"}}},{"node":{"fields":{"slug":"/Language-Features/20-Async-Promise","title":"Async & Promise"}}},{"node":{"fields":{"slug":"/Language-Features/23-Attribute-Decorator","title":"속성 (데코레이터)"}}},{"node":{"fields":{"slug":"/Language-Features/24-Unboxed","title":"언박싱"}}},{"node":{"fields":{"slug":"/Language-Features/25-Reserved-Keyword","title":"예약된 키워드"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/02-Shared-Data-Types","title":"데이터 타입 공유"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/01-Embed-Raw-JavaScript","title":"Embed Raw JavaScript"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/03-External-Bind-to-Any-JS-Library","title":"External (자바스크립트 라이브러리 바인딩)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/04-Bind-to-JS-Object","title":"자바스크립트 객체에 바인딩하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/05-Bind-to-JS-Function","title":"Bind to JS Function"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/06-Import-from-Export-to-JS","title":"Import from / Export to JS"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/07-Bind-to-Global-JS-Values","title":"Bind to Global JS Values"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/08-JSON","title":"JSON"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/09-Inlining-Constants","title":"Inlining Constants"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/10-Use-Illegal-Identifier-Names","title":"Use Illegal Identifier Names"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/12-Browser-Support-Polyfills","title":"Browser Support & Polyfills"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers","title":"인터롭 코드 자동 생성하기"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/13-Interop-Cheatsheet","title":"Interop Cheatsheet"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/01-@deriving(accessors)","title":"@deriving(accessor)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/02-@deriving(jsConverter)","title":"@deriving(jsConverter)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/03-@deriving(abstract)","title":"@deriving(abstract)"}}},{"node":{"fields":{"slug":"/JavaScript-Interop/11-Generate-Converters-Helpers/04-@obj","title":"@obj"}}},{"node":{"fields":{"slug":"/Guides/01-Converting-from-JS","title":"자바스크립트 파일을 변환하기"}}},{"node":{"fields":{"slug":"/Guides/02-Libraries","title":"Libraries"}}},{"node":{"fields":{"slug":"/Extra/01-Newcomer-Examples","title":"초보자를 위한 예제"}}},{"node":{"fields":{"slug":"/Extra/03-FAQ","title":"자주 묻는 질문"}}},{"node":{"fields":{"slug":"/Extra/02-Project-Structure","title":"Project Structure"}}},{"node":{"fields":{"slug":"/Build-System/01-Overview","title":"Build System Overview"}}},{"node":{"fields":{"slug":"/Build-System/02-Configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/Build-System/03-Configuration-Schema","title":"Configuration Schema"}}},{"node":{"fields":{"slug":"/Build-System/05-Performance","title":"Performance"}}},{"node":{"fields":{"slug":"/Build-System/04-Interop-with-JS-Build-Systems","title":"Interop with JS Build Systems"}}}]}},"pageContext":{"id":"3a00f23e-03d0-5bc4-bc4b-971f8b557629"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}